; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\clock.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\clock.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\app -I..\bsp -I..\common -I..\cortex-m3 -I..\rt_thread\include -I..\STM32F10x_StdPeriph_Driver\inc -IF:\work\Keil_rtthread_experient\mdk\RTE -ID:\EngineeringSoftware\Keil_core\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0 -ID:\EngineeringSoftware\Keil_core\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DSTM32F10X_MD_VL -DSTM32F10X_MD_VL -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\clock.crf ..\rt_thread\kernel\clock.c]
                          THUMB

                          AREA ||i.rt_system_tick_init||, CODE, READONLY, ALIGN=1

                  rt_system_tick_init PROC
;;;44      */
;;;45     void rt_system_tick_init(void)
000000  4770              BX       lr
;;;46     {
;;;47     }
;;;48     
                          ENDP


                          AREA ||i.rt_tick_from_millisecond||, CODE, READONLY, ALIGN=1

                  rt_tick_from_millisecond PROC
;;;113     */
;;;114    rt_tick_t rt_tick_from_millisecond(rt_uint32_t ms)
000000  4601              MOV      r1,r0
;;;115    {
;;;116        /* return the calculated tick */
;;;117        return (RT_TICK_PER_SECOND * ms + 999) / 1000;
000002  2264              MOVS     r2,#0x64
000004  fb01f002          MUL      r0,r1,r2
000008  f20030e7          ADD      r0,r0,#0x3e7
00000c  f44f727a          MOV      r2,#0x3e8
000010  fbb0f0f2          UDIV     r0,r0,r2
;;;118    }
000014  4770              BX       lr
;;;119    RTM_EXPORT(rt_tick_from_millisecond);
                          ENDP


                          AREA ||i.rt_tick_get||, CODE, READONLY, ALIGN=2

                  rt_tick_get PROC
;;;59      */
;;;60     rt_tick_t rt_tick_get(void)
000000  4801              LDR      r0,|L3.8|
;;;61     {
;;;62         /* return the global tick */
;;;63         return rt_tick;
000002  6800              LDR      r0,[r0,#0]  ; rt_tick
;;;64     }
000004  4770              BX       lr
;;;65     RTM_EXPORT(rt_tick_get);
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      rt_tick

                          AREA ||i.rt_tick_increase||, CODE, READONLY, ALIGN=2

                  rt_tick_increase PROC
;;;82      */
;;;83     void rt_tick_increase(void)
000000  b510              PUSH     {r4,lr}
;;;84     {
;;;85         struct rt_thread *thread;
;;;86     
;;;87         /* increase the global tick */
;;;88         ++ rt_tick;
000002  480a              LDR      r0,|L4.44|
000004  6800              LDR      r0,[r0,#0]  ; rt_tick
000006  1c40              ADDS     r0,r0,#1
000008  4908              LDR      r1,|L4.44|
00000a  6008              STR      r0,[r1,#0]  ; rt_tick
;;;89     
;;;90         /* check time slice */
;;;91         thread = rt_thread_self();
00000c  f7fffffe          BL       rt_thread_self
000010  4604              MOV      r4,r0
;;;92     
;;;93         -- thread->remaining_tick;
000012  6ca0              LDR      r0,[r4,#0x48]
000014  1e40              SUBS     r0,r0,#1
000016  64a0              STR      r0,[r4,#0x48]
;;;94         if (thread->remaining_tick == 0)
000018  6ca0              LDR      r0,[r4,#0x48]
00001a  b918              CBNZ     r0,|L4.36|
;;;95         {
;;;96             /* change to initialized tick */
;;;97             thread->remaining_tick = thread->init_tick;
00001c  6c60              LDR      r0,[r4,#0x44]
00001e  64a0              STR      r0,[r4,#0x48]
;;;98     
;;;99             /* yield */
;;;100            rt_thread_yield();
000020  f7fffffe          BL       rt_thread_yield
                  |L4.36|
;;;101        }
;;;102    
;;;103        /* check timer */
;;;104        rt_timer_check();
000024  f7fffffe          BL       rt_timer_check
;;;105    }
000028  bd10              POP      {r4,pc}
;;;106    
                          ENDP

00002a  0000              DCW      0x0000
                  |L4.44|
                          DCD      rt_tick

                          AREA ||i.rt_tick_set||, CODE, READONLY, ALIGN=2

                  rt_tick_set PROC
;;;69      */
;;;70     void rt_tick_set(rt_tick_t tick)
000000  b570              PUSH     {r4-r6,lr}
;;;71     {
000002  4604              MOV      r4,r0
;;;72         rt_base_t level;
;;;73     
;;;74         level = rt_hw_interrupt_disable();
000004  f7fffffe          BL       rt_hw_interrupt_disable
000008  4605              MOV      r5,r0
;;;75         rt_tick = tick;
00000a  4803              LDR      r0,|L5.24|
00000c  6004              STR      r4,[r0,#0]  ; rt_tick
;;;76         rt_hw_interrupt_enable(level);
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       rt_hw_interrupt_enable
;;;77     }
000014  bd70              POP      {r4-r6,pc}
;;;78     
                          ENDP

000016  0000              DCW      0x0000
                  |L5.24|
                          DCD      rt_tick

                          AREA ||.data||, DATA, ALIGN=2

                  rt_tick
                          DCD      0x00000000
