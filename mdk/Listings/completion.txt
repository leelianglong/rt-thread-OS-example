; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\completion.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\completion.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\app -I..\bsp -I..\common -I..\cortex-m3 -I..\rt_thread\include -I..\STM32F10x_StdPeriph_Driver\inc -IF:\work\Keil_rtthread_experient\mdk\RTE -ID:\EngineeringSoftware\Keil_core\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0 -ID:\EngineeringSoftware\Keil_core\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DSTM32F10X_MD_VL -DSTM32F10X_MD_VL -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\completion.crf ..\common\completion.c]
                          THUMB

                          AREA ||i.rt_completion_done||, CODE, READONLY, ALIGN=2

                  rt_completion_done PROC
;;;110    
;;;111    void rt_completion_done(struct rt_completion *completion)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4604              MOV      r4,r0
;;;113        rt_base_t level;
;;;114        RT_ASSERT(completion != RT_NULL);
000004  b924              CBNZ     r4,|L1.16|
000006  2272              MOVS     r2,#0x72
000008  4910              LDR      r1,|L1.76|
00000a  a011              ADR      r0,|L1.80|
00000c  f7fffffe          BL       rt_assert_handler
                  |L1.16|
;;;115    
;;;116        if (completion->flag == RT_COMPLETED)
000010  6820              LDR      r0,[r4,#0]
000012  2801              CMP      r0,#1
000014  d100              BNE      |L1.24|
                  |L1.22|
;;;117            return;
;;;118    
;;;119        level = rt_hw_interrupt_disable();
;;;120        completion->flag = RT_COMPLETED;
;;;121    
;;;122        if (!rt_list_isempty(&(completion->suspended_list)))
;;;123        {
;;;124            /* there is one thread in suspended list */
;;;125            struct rt_thread *thread;
;;;126    
;;;127            /* get thread entry */
;;;128            thread = rt_list_entry(completion->suspended_list.next,
;;;129                                   struct rt_thread,
;;;130                                   tlist);
;;;131    
;;;132            /* resume it */
;;;133            rt_thread_resume(thread);
;;;134            rt_hw_interrupt_enable(level);
;;;135    
;;;136            /* perform a schedule */
;;;137            rt_schedule();
;;;138        }
;;;139        else
;;;140        {
;;;141            rt_hw_interrupt_enable(level);
;;;142        }
;;;143    }
000016  bd70              POP      {r4-r6,pc}
                  |L1.24|
000018  f7fffffe          BL       rt_hw_interrupt_disable
00001c  4606              MOV      r6,r0                 ;119
00001e  2001              MOVS     r0,#1                 ;120
000020  6020              STR      r0,[r4,#0]            ;120
000022  1d20              ADDS     r0,r4,#4              ;122
000024  f7fffffe          BL       rt_list_isempty
000028  b958              CBNZ     r0,|L1.66|
00002a  6860              LDR      r0,[r4,#4]            ;128
00002c  f1a00514          SUB      r5,r0,#0x14           ;128
000030  4628              MOV      r0,r5                 ;133
000032  f7fffffe          BL       rt_thread_resume
000036  4630              MOV      r0,r6                 ;134
000038  f7fffffe          BL       rt_hw_interrupt_enable
00003c  f7fffffe          BL       rt_schedule
000040  e002              B        |L1.72|
                  |L1.66|
000042  4630              MOV      r0,r6                 ;141
000044  f7fffffe          BL       rt_hw_interrupt_enable
                  |L1.72|
000048  bf00              NOP      
00004a  e7e4              B        |L1.22|
;;;144    RTM_EXPORT(rt_completion_done);
                          ENDP

                  |L1.76|
                          DCD      |symbol_number.17|
                  |L1.80|
000050  636f6d70          DCB      "completion != RT_NULL",0
000054  6c657469
000058  6f6e2021
00005c  3d205254
000060  5f4e554c
000064  4c00    
000066  00                DCB      0
000067  00                DCB      0

                          AREA ||i.rt_completion_init||, CODE, READONLY, ALIGN=2

                  rt_completion_init PROC
;;;31     
;;;32     void rt_completion_init(struct rt_completion *completion)
000000  b570              PUSH     {r4-r6,lr}
;;;33     {
000002  4604              MOV      r4,r0
;;;34         rt_base_t level;
;;;35         RT_ASSERT(completion != RT_NULL);
000004  b924              CBNZ     r4,|L2.16|
000006  2223              MOVS     r2,#0x23
000008  4908              LDR      r1,|L2.44|
00000a  a009              ADR      r0,|L2.48|
00000c  f7fffffe          BL       rt_assert_handler
                  |L2.16|
;;;36     
;;;37         level = rt_hw_interrupt_disable();
000010  f7fffffe          BL       rt_hw_interrupt_disable
000014  4605              MOV      r5,r0
;;;38         completion->flag = RT_UNCOMPLETED;
000016  2000              MOVS     r0,#0
000018  6020              STR      r0,[r4,#0]
;;;39         rt_list_init(&completion->suspended_list);
00001a  1d20              ADDS     r0,r4,#4
00001c  6040              STR      r0,[r0,#4]
00001e  6000              STR      r0,[r0,#0]
000020  bf00              NOP      
;;;40         rt_hw_interrupt_enable(level);
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       rt_hw_interrupt_enable
;;;41     }
000028  bd70              POP      {r4-r6,pc}
;;;42     RTM_EXPORT(rt_completion_init);
                          ENDP

00002a  0000              DCW      0x0000
                  |L2.44|
                          DCD      __FUNCTION__
                  |L2.48|
000030  636f6d70          DCB      "completion != RT_NULL",0
000034  6c657469
000038  6f6e2021
00003c  3d205254
000040  5f4e554c
000044  4c00    
000046  00                DCB      0
000047  00                DCB      0

                          AREA ||i.rt_completion_wait||, CODE, READONLY, ALIGN=2

                  rt_completion_wait PROC
;;;43     
;;;44     rt_err_t rt_completion_wait(struct rt_completion *completion,
000000  e92d41f3          PUSH     {r0,r1,r4-r8,lr}
;;;45                                 rt_int32_t            timeout)
;;;46     {
000004  4605              MOV      r5,r0
;;;47         rt_err_t result;
;;;48         rt_base_t level;
;;;49         rt_thread_t thread;
;;;50         RT_ASSERT(completion != RT_NULL);
000006  b925              CBNZ     r5,|L3.18|
000008  2232              MOVS     r2,#0x32
00000a  492f              LDR      r1,|L3.200|
00000c  a02f              ADR      r0,|L3.204|
00000e  f7fffffe          BL       rt_assert_handler
                  |L3.18|
;;;51     
;;;52         result = RT_EOK;
000012  2600              MOVS     r6,#0
;;;53         thread = rt_thread_self();
000014  f7fffffe          BL       rt_thread_self
000018  4604              MOV      r4,r0
;;;54     
;;;55         level = rt_hw_interrupt_disable();
00001a  f7fffffe          BL       rt_hw_interrupt_disable
00001e  4607              MOV      r7,r0
;;;56         if (completion->flag != RT_COMPLETED)
000020  6828              LDR      r0,[r5,#0]
000022  2801              CMP      r0,#1
000024  d046              BEQ      |L3.180|
;;;57         {
;;;58             /* only one thread can suspend on complete */
;;;59             RT_ASSERT(rt_list_isempty(&(completion->suspended_list)));
000026  1d28              ADDS     r0,r5,#4
000028  f7fffffe          BL       rt_list_isempty
00002c  b920              CBNZ     r0,|L3.56|
00002e  223b              MOVS     r2,#0x3b
000030  4925              LDR      r1,|L3.200|
000032  a02c              ADR      r0,|L3.228|
000034  f7fffffe          BL       rt_assert_handler
                  |L3.56|
;;;60     
;;;61             if (timeout == 0)
000038  9801              LDR      r0,[sp,#4]
00003a  b910              CBNZ     r0,|L3.66|
;;;62             {
;;;63                 result = -RT_ETIMEOUT;
00003c  f06f0601          MVN      r6,#1
;;;64                 goto __exit;
000040  e03b              B        |L3.186|
                  |L3.66|
;;;65             }
;;;66             else
;;;67             {
;;;68                 /* reset thread error number */
;;;69                 thread->error = RT_EOK;
000042  2000              MOVS     r0,#0
000044  6320              STR      r0,[r4,#0x30]
;;;70     
;;;71                 /* suspend thread */
;;;72                 rt_thread_suspend(thread);
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       rt_thread_suspend
;;;73                 /* add to suspended list */
;;;74                 rt_list_insert_before(&(completion->suspended_list),
00004c  1d28              ADDS     r0,r5,#4
00004e  f1040114          ADD      r1,r4,#0x14
000052  6842              LDR      r2,[r0,#4]
000054  6011              STR      r1,[r2,#0]
000056  6842              LDR      r2,[r0,#4]
000058  604a              STR      r2,[r1,#4]
00005a  6041              STR      r1,[r0,#4]
00005c  6008              STR      r0,[r1,#0]
00005e  bf00              NOP      
;;;75                                       &(thread->tlist));
;;;76     
;;;77                 /* current context checking */
;;;78                 RT_DEBUG_NOT_IN_INTERRUPT;
000060  bf00              NOP      
000062  f7fffffe          BL       rt_hw_interrupt_disable
000066  4680              MOV      r8,r0
000068  f7fffffe          BL       rt_interrupt_get_nest
00006c  b140              CBZ      r0,|L3.128|
00006e  4916              LDR      r1,|L3.200|
000070  a028              ADR      r0,|L3.276|
000072  f7fffffe          BL       rt_kprintf
000076  224e              MOVS     r2,#0x4e
000078  4913              LDR      r1,|L3.200|
00007a  a02f              ADR      r0,|L3.312|
00007c  f7fffffe          BL       rt_assert_handler
                  |L3.128|
000080  4640              MOV      r0,r8
000082  f7fffffe          BL       rt_hw_interrupt_enable
000086  bf00              NOP      
;;;79     
;;;80                 /* start timer */
;;;81                 if (timeout > 0)
000088  9801              LDR      r0,[sp,#4]
00008a  2800              CMP      r0,#0
00008c  dd09              BLE      |L3.162|
;;;82                 {
;;;83                     /* reset the timeout of thread timer and start it */
;;;84                     rt_timer_control(&(thread->thread_timer),
00008e  aa01              ADD      r2,sp,#4
000090  2100              MOVS     r1,#0
000092  f104004c          ADD      r0,r4,#0x4c
000096  f7fffffe          BL       rt_timer_control
;;;85                                      RT_TIMER_CTRL_SET_TIME,
;;;86                                      &timeout);
;;;87                     rt_timer_start(&(thread->thread_timer));
00009a  f104004c          ADD      r0,r4,#0x4c
00009e  f7fffffe          BL       rt_timer_start
                  |L3.162|
;;;88                 }
;;;89                 /* enable interrupt */
;;;90                 rt_hw_interrupt_enable(level);
0000a2  4638              MOV      r0,r7
0000a4  f7fffffe          BL       rt_hw_interrupt_enable
;;;91     
;;;92                 /* do schedule */
;;;93                 rt_schedule();
0000a8  f7fffffe          BL       rt_schedule
;;;94     
;;;95                 /* thread is waked up */
;;;96                 result = thread->error;
0000ac  6b26              LDR      r6,[r4,#0x30]
;;;97     
;;;98                 level = rt_hw_interrupt_disable();
0000ae  f7fffffe          BL       rt_hw_interrupt_disable
0000b2  4607              MOV      r7,r0
                  |L3.180|
;;;99             }
;;;100        }
;;;101        /* clean completed flag */
;;;102        completion->flag = RT_UNCOMPLETED;
0000b4  2000              MOVS     r0,#0
0000b6  6028              STR      r0,[r5,#0]
;;;103    
;;;104    __exit:
0000b8  bf00              NOP      
                  |L3.186|
;;;105        rt_hw_interrupt_enable(level);
0000ba  4638              MOV      r0,r7
0000bc  f7fffffe          BL       rt_hw_interrupt_enable
;;;106    
;;;107        return result;
0000c0  4630              MOV      r0,r6
;;;108    }
0000c2  e8bd81fc          POP      {r2-r8,pc}
;;;109    RTM_EXPORT(rt_completion_wait);
                          ENDP

0000c6  0000              DCW      0x0000
                  |L3.200|
                          DCD      |symbol_number.16|
                  |L3.204|
0000cc  636f6d70          DCB      "completion != RT_NULL",0
0000d0  6c657469
0000d4  6f6e2021
0000d8  3d205254
0000dc  5f4e554c
0000e0  4c00    
0000e2  00                DCB      0
0000e3  00                DCB      0
                  |L3.228|
0000e4  72745f6c          DCB      "rt_list_isempty(&(completion->suspended_list))",0
0000e8  6973745f
0000ec  6973656d
0000f0  70747928
0000f4  2628636f
0000f8  6d706c65
0000fc  74696f6e
000100  2d3e7375
000104  7370656e
000108  6465645f
00010c  6c697374
000110  292900  
000113  00                DCB      0
                  |L3.276|
000114  46756e63          DCB      "Function[%s] shall not used in ISR\n",0
000118  74696f6e
00011c  5b25735d
000120  20736861
000124  6c6c206e
000128  6f742075
00012c  73656420
000130  696e2049
000134  53520a00
                  |L3.312|
000138  3000              DCB      "0",0
00013a  00                DCB      0
00013b  00                DCB      0

                          AREA ||i.rt_list_isempty||, CODE, READONLY, ALIGN=1

                  rt_list_isempty PROC
;;;101     */
;;;102    rt_inline int rt_list_isempty(const rt_list_t *l)
000000  4601              MOV      r1,r0
;;;103    {
;;;104        return l->next == l;
000002  6808              LDR      r0,[r1,#0]
000004  4288              CMP      r0,r1
000006  d101              BNE      |L4.12|
000008  2001              MOVS     r0,#1
                  |L4.10|
;;;105    }
00000a  4770              BX       lr
                  |L4.12|
00000c  2000              MOVS     r0,#0                 ;104
00000e  e7fc              B        |L4.10|
;;;106    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  72745f63          DCB      0x72,0x74,0x5f,0x63
000004  6f6d706c          DCB      0x6f,0x6d,0x70,0x6c
000008  6574696f          DCB      0x65,0x74,0x69,0x6f
00000c  6e5f696e          DCB      0x6e,0x5f,0x69,0x6e
000010  697400            DCB      0x69,0x74,0x00
                  |symbol_number.16|
000013  72                DCB      0x72
000014  745f636f          DCB      0x74,0x5f,0x63,0x6f
000018  6d706c65          DCB      0x6d,0x70,0x6c,0x65
00001c  74696f6e          DCB      0x74,0x69,0x6f,0x6e
000020  5f776169          DCB      0x5f,0x77,0x61,0x69
000024  7400              DCB      0x74,0x00
                  |symbol_number.17|
000026  7274              DCB      0x72,0x74
000028  5f636f6d          DCB      0x5f,0x63,0x6f,0x6d
00002c  706c6574          DCB      0x70,0x6c,0x65,0x74
000030  696f6e5f          DCB      0x69,0x6f,0x6e,0x5f
000034  646f6e65          DCB      0x64,0x6f,0x6e,0x65
000038  00                DCB      0x00
