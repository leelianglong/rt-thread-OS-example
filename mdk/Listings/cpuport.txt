; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\cpuport.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\cpuport.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\app -I..\bsp -I..\common -I..\cortex-m3 -I..\rt_thread\include -I..\STM32F10x_StdPeriph_Driver\inc -IF:\work\Keil_rtthread_experient\mdk\RTE -ID:\EngineeringSoftware\Keil_core\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0 -ID:\EngineeringSoftware\Keil_core\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DSTM32F10X_MD_VL -DSTM32F10X_MD_VL -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\cpuport.crf ..\cortex-m3\cpuport.c]
                          THUMB

                          AREA ||i.rt_hw_cpu_shutdown||, CODE, READONLY, ALIGN=2

                  rt_hw_cpu_shutdown PROC
;;;347     */
;;;348    void rt_hw_cpu_shutdown(void)
000000  b510              PUSH     {r4,lr}
;;;349    {
;;;350        rt_kprintf("shutdown...\n");
000002  a005              ADR      r0,|L1.24|
000004  f7fffffe          BL       rt_kprintf
;;;351    
;;;352        RT_ASSERT(0);
000008  f44f72b0          MOV      r2,#0x160
00000c  4906              LDR      r1,|L1.40|
00000e  a007              ADR      r0,|L1.44|
000010  f7fffffe          BL       rt_assert_handler
;;;353    }
000014  bd10              POP      {r4,pc}
;;;354    
                          ENDP

000016  0000              DCW      0x0000
                  |L1.24|
000018  73687574          DCB      "shutdown...\n",0
00001c  646f776e
000020  2e2e2e0a
000024  00      
000025  00                DCB      0
000026  00                DCB      0
000027  00                DCB      0
                  |L1.40|
                          DCD      __FUNCTION__
                  |L1.44|
00002c  3000              DCB      "0",0
00002e  00                DCB      0
00002f  00                DCB      0

                          AREA ||i.rt_hw_exception_install||, CODE, READONLY, ALIGN=2

                  rt_hw_exception_install PROC
;;;103     */
;;;104    void rt_hw_exception_install(rt_err_t (*exception_handle)(void* context))
000000  4901              LDR      r1,|L2.8|
;;;105    {
;;;106        rt_exception_hook = exception_handle;
000002  6008              STR      r0,[r1,#0]  ; rt_exception_hook
;;;107    }
000004  4770              BX       lr
;;;108    
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      rt_exception_hook

                          AREA ||i.rt_hw_hard_fault_exception||, CODE, READONLY, ALIGN=2

                  rt_hw_hard_fault_exception PROC
;;;292     */
;;;293    void rt_hw_hard_fault_exception(struct exception_info * exception_info)
000000  b570              PUSH     {r4-r6,lr}
;;;294    {
000002  4605              MOV      r5,r0
;;;295        extern long list_thread(void);
;;;296        struct stack_frame* context = &exception_info->stack_frame;
000004  1d2c              ADDS     r4,r5,#4
;;;297    
;;;298        if (rt_exception_hook != RT_NULL)
000006  482e              LDR      r0,|L3.192|
000008  6800              LDR      r0,[r0,#0]  ; rt_exception_hook
00000a  b138              CBZ      r0,|L3.28|
;;;299        {
;;;300            rt_err_t result;
;;;301    
;;;302            result = rt_exception_hook(exception_info);
00000c  4628              MOV      r0,r5
00000e  492c              LDR      r1,|L3.192|
000010  6809              LDR      r1,[r1,#0]  ; rt_exception_hook
000012  4788              BLX      r1
000014  4606              MOV      r6,r0
;;;303            if (result == RT_EOK)
000016  b906              CBNZ     r6,|L3.26|
;;;304                return;
;;;305        }
;;;306    
;;;307        rt_kprintf("psr: 0x%08x\n", context->exception_stack_frame.psr);
;;;308    
;;;309        rt_kprintf("r00: 0x%08x\n", context->exception_stack_frame.r0);
;;;310        rt_kprintf("r01: 0x%08x\n", context->exception_stack_frame.r1);
;;;311        rt_kprintf("r02: 0x%08x\n", context->exception_stack_frame.r2);
;;;312        rt_kprintf("r03: 0x%08x\n", context->exception_stack_frame.r3);
;;;313        rt_kprintf("r04: 0x%08x\n", context->r4);
;;;314        rt_kprintf("r05: 0x%08x\n", context->r5);
;;;315        rt_kprintf("r06: 0x%08x\n", context->r6);
;;;316        rt_kprintf("r07: 0x%08x\n", context->r7);
;;;317        rt_kprintf("r08: 0x%08x\n", context->r8);
;;;318        rt_kprintf("r09: 0x%08x\n", context->r9);
;;;319        rt_kprintf("r10: 0x%08x\n", context->r10);
;;;320        rt_kprintf("r11: 0x%08x\n", context->r11);
;;;321        rt_kprintf("r12: 0x%08x\n", context->exception_stack_frame.r12);
;;;322        rt_kprintf(" lr: 0x%08x\n", context->exception_stack_frame.lr);
;;;323        rt_kprintf(" pc: 0x%08x\n", context->exception_stack_frame.pc);
;;;324    
;;;325        if(exception_info->exc_return & (1 << 2) )
;;;326        {
;;;327            rt_kprintf("hard fault on thread: %s\r\n\r\n", rt_thread_self()->name);
;;;328    
;;;329    #ifdef RT_USING_FINSH
;;;330            list_thread();
;;;331    #endif /* RT_USING_FINSH */
;;;332        }
;;;333        else
;;;334        {
;;;335            rt_kprintf("hard fault on handler\r\n\r\n");
;;;336        }
;;;337    
;;;338    #ifdef RT_USING_FINSH
;;;339        hard_fault_track();
;;;340    #endif /* RT_USING_FINSH */
;;;341    
;;;342        while (1);
;;;343    }
000018  bd70              POP      {r4-r6,pc}
                  |L3.26|
00001a  bf00              NOP                            ;305
                  |L3.28|
00001c  a029              ADR      r0,|L3.196|
00001e  6be1              LDR      r1,[r4,#0x3c]         ;307
000020  f7fffffe          BL       rt_kprintf
000024  a02b              ADR      r0,|L3.212|
000026  6a21              LDR      r1,[r4,#0x20]         ;309
000028  f7fffffe          BL       rt_kprintf
00002c  a02d              ADR      r0,|L3.228|
00002e  6a61              LDR      r1,[r4,#0x24]         ;310
000030  f7fffffe          BL       rt_kprintf
000034  a02f              ADR      r0,|L3.244|
000036  6aa1              LDR      r1,[r4,#0x28]         ;311
000038  f7fffffe          BL       rt_kprintf
00003c  a031              ADR      r0,|L3.260|
00003e  6ae1              LDR      r1,[r4,#0x2c]         ;312
000040  f7fffffe          BL       rt_kprintf
000044  a033              ADR      r0,|L3.276|
000046  6821              LDR      r1,[r4,#0]            ;313
000048  f7fffffe          BL       rt_kprintf
00004c  a035              ADR      r0,|L3.292|
00004e  6861              LDR      r1,[r4,#4]            ;314
000050  f7fffffe          BL       rt_kprintf
000054  a037              ADR      r0,|L3.308|
000056  68a1              LDR      r1,[r4,#8]            ;315
000058  f7fffffe          BL       rt_kprintf
00005c  a039              ADR      r0,|L3.324|
00005e  68e1              LDR      r1,[r4,#0xc]          ;316
000060  f7fffffe          BL       rt_kprintf
000064  a03b              ADR      r0,|L3.340|
000066  6921              LDR      r1,[r4,#0x10]         ;317
000068  f7fffffe          BL       rt_kprintf
00006c  a03d              ADR      r0,|L3.356|
00006e  6961              LDR      r1,[r4,#0x14]         ;318
000070  f7fffffe          BL       rt_kprintf
000074  a03f              ADR      r0,|L3.372|
000076  69a1              LDR      r1,[r4,#0x18]         ;319
000078  f7fffffe          BL       rt_kprintf
00007c  a041              ADR      r0,|L3.388|
00007e  69e1              LDR      r1,[r4,#0x1c]         ;320
000080  f7fffffe          BL       rt_kprintf
000084  a043              ADR      r0,|L3.404|
000086  6b21              LDR      r1,[r4,#0x30]         ;321
000088  f7fffffe          BL       rt_kprintf
00008c  a045              ADR      r0,|L3.420|
00008e  6b61              LDR      r1,[r4,#0x34]         ;322
000090  f7fffffe          BL       rt_kprintf
000094  a047              ADR      r0,|L3.436|
000096  6ba1              LDR      r1,[r4,#0x38]         ;323
000098  f7fffffe          BL       rt_kprintf
00009c  7828              LDRB     r0,[r5,#0]            ;325
00009e  f0000004          AND      r0,r0,#4              ;325
0000a2  b138              CBZ      r0,|L3.180|
0000a4  f7fffffe          BL       rt_thread_self
0000a8  4606              MOV      r6,r0                 ;327
0000aa  4631              MOV      r1,r6                 ;327
0000ac  a045              ADR      r0,|L3.452|
0000ae  f7fffffe          BL       rt_kprintf
0000b2  e002              B        |L3.186|
                  |L3.180|
0000b4  a04b              ADR      r0,|L3.484|
0000b6  f7fffffe          BL       rt_kprintf
                  |L3.186|
0000ba  bf00              NOP                            ;342
                  |L3.188|
0000bc  e7fe              B        |L3.188|
;;;344    
                          ENDP

0000be  0000              DCW      0x0000
                  |L3.192|
                          DCD      rt_exception_hook
                  |L3.196|
0000c4  7073723a          DCB      "psr: 0x%08x\n",0
0000c8  20307825
0000cc  3038780a
0000d0  00      
0000d1  00                DCB      0
0000d2  00                DCB      0
0000d3  00                DCB      0
                  |L3.212|
0000d4  7230303a          DCB      "r00: 0x%08x\n",0
0000d8  20307825
0000dc  3038780a
0000e0  00      
0000e1  00                DCB      0
0000e2  00                DCB      0
0000e3  00                DCB      0
                  |L3.228|
0000e4  7230313a          DCB      "r01: 0x%08x\n",0
0000e8  20307825
0000ec  3038780a
0000f0  00      
0000f1  00                DCB      0
0000f2  00                DCB      0
0000f3  00                DCB      0
                  |L3.244|
0000f4  7230323a          DCB      "r02: 0x%08x\n",0
0000f8  20307825
0000fc  3038780a
000100  00      
000101  00                DCB      0
000102  00                DCB      0
000103  00                DCB      0
                  |L3.260|
000104  7230333a          DCB      "r03: 0x%08x\n",0
000108  20307825
00010c  3038780a
000110  00      
000111  00                DCB      0
000112  00                DCB      0
000113  00                DCB      0
                  |L3.276|
000114  7230343a          DCB      "r04: 0x%08x\n",0
000118  20307825
00011c  3038780a
000120  00      
000121  00                DCB      0
000122  00                DCB      0
000123  00                DCB      0
                  |L3.292|
000124  7230353a          DCB      "r05: 0x%08x\n",0
000128  20307825
00012c  3038780a
000130  00      
000131  00                DCB      0
000132  00                DCB      0
000133  00                DCB      0
                  |L3.308|
000134  7230363a          DCB      "r06: 0x%08x\n",0
000138  20307825
00013c  3038780a
000140  00      
000141  00                DCB      0
000142  00                DCB      0
000143  00                DCB      0
                  |L3.324|
000144  7230373a          DCB      "r07: 0x%08x\n",0
000148  20307825
00014c  3038780a
000150  00      
000151  00                DCB      0
000152  00                DCB      0
000153  00                DCB      0
                  |L3.340|
000154  7230383a          DCB      "r08: 0x%08x\n",0
000158  20307825
00015c  3038780a
000160  00      
000161  00                DCB      0
000162  00                DCB      0
000163  00                DCB      0
                  |L3.356|
000164  7230393a          DCB      "r09: 0x%08x\n",0
000168  20307825
00016c  3038780a
000170  00      
000171  00                DCB      0
000172  00                DCB      0
000173  00                DCB      0
                  |L3.372|
000174  7231303a          DCB      "r10: 0x%08x\n",0
000178  20307825
00017c  3038780a
000180  00      
000181  00                DCB      0
000182  00                DCB      0
000183  00                DCB      0
                  |L3.388|
000184  7231313a          DCB      "r11: 0x%08x\n",0
000188  20307825
00018c  3038780a
000190  00      
000191  00                DCB      0
000192  00                DCB      0
000193  00                DCB      0
                  |L3.404|
000194  7231323a          DCB      "r12: 0x%08x\n",0
000198  20307825
00019c  3038780a
0001a0  00      
0001a1  00                DCB      0
0001a2  00                DCB      0
0001a3  00                DCB      0
                  |L3.420|
0001a4  206c723a          DCB      " lr: 0x%08x\n",0
0001a8  20307825
0001ac  3038780a
0001b0  00      
0001b1  00                DCB      0
0001b2  00                DCB      0
0001b3  00                DCB      0
                  |L3.436|
0001b4  2070633a          DCB      " pc: 0x%08x\n",0
0001b8  20307825
0001bc  3038780a
0001c0  00      
0001c1  00                DCB      0
0001c2  00                DCB      0
0001c3  00                DCB      0
                  |L3.452|
0001c4  68617264          DCB      "hard fault on thread: %s\r\n\r\n",0
0001c8  20666175
0001cc  6c74206f
0001d0  6e207468
0001d4  72656164
0001d8  3a202573
0001dc  0d0a0d0a
0001e0  00      
0001e1  00                DCB      0
0001e2  00                DCB      0
0001e3  00                DCB      0
                  |L3.484|
0001e4  68617264          DCB      "hard fault on handler\r\n\r\n",0
0001e8  20666175
0001ec  6c74206f
0001f0  6e206861
0001f4  6e646c65
0001f8  720d0a0d
0001fc  0a00    
0001fe  00                DCB      0
0001ff  00                DCB      0

                          AREA ||i.rt_hw_stack_init||, CODE, READONLY, ALIGN=2

                  rt_hw_stack_init PROC
;;;64      */
;;;65     rt_uint8_t *rt_hw_stack_init(void       *tentry,
000000  b5f0              PUSH     {r4-r7,lr}
;;;66                                  void       *parameter,
;;;67                                  rt_uint8_t *stack_addr,
;;;68                                  void       *texit)
;;;69     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;70         struct stack_frame *stack_frame;
;;;71         rt_uint8_t         *stk;
;;;72         unsigned long       i;
;;;73     
;;;74         stk  = stack_addr + sizeof(rt_uint32_t);
000008  1d30              ADDS     r0,r6,#4
;;;75         stk  = (rt_uint8_t *)RT_ALIGN_DOWN((rt_uint32_t)stk, 8);
00000a  f0200007          BIC      r0,r0,#7
;;;76         stk -= sizeof(struct stack_frame);
00000e  3840              SUBS     r0,r0,#0x40
;;;77     
;;;78         stack_frame = (struct stack_frame *)stk;
000010  4601              MOV      r1,r0
;;;79     
;;;80         /* init all register */
;;;81         for (i = 0; i < sizeof(struct stack_frame) / sizeof(rt_uint32_t); i ++)
000012  2200              MOVS     r2,#0
000014  e003              B        |L4.30|
                  |L4.22|
;;;82         {
;;;83             ((rt_uint32_t *)stack_frame)[i] = 0xdeadbeef;
000016  4f0c              LDR      r7,|L4.72|
000018  f8417022          STR      r7,[r1,r2,LSL #2]
00001c  1c52              ADDS     r2,r2,#1              ;81
                  |L4.30|
00001e  2a10              CMP      r2,#0x10              ;81
000020  d3f9              BCC      |L4.22|
;;;84         }
;;;85     
;;;86         stack_frame->exception_stack_frame.r0  = (unsigned long)parameter; /* r0 : argument */
000022  620d              STR      r5,[r1,#0x20]
;;;87         stack_frame->exception_stack_frame.r1  = 0;                        /* r1 */
000024  f04f0c00          MOV      r12,#0
000028  f8c1c024          STR      r12,[r1,#0x24]
;;;88         stack_frame->exception_stack_frame.r2  = 0;                        /* r2 */
00002c  f8c1c028          STR      r12,[r1,#0x28]
;;;89         stack_frame->exception_stack_frame.r3  = 0;                        /* r3 */
000030  f8c1c02c          STR      r12,[r1,#0x2c]
;;;90         stack_frame->exception_stack_frame.r12 = 0;                        /* r12 */
000034  f8c1c030          STR      r12,[r1,#0x30]
;;;91         stack_frame->exception_stack_frame.lr  = (unsigned long)texit;     /* lr */
000038  634b              STR      r3,[r1,#0x34]
;;;92         stack_frame->exception_stack_frame.pc  = (unsigned long)tentry;    /* entry point, pc */
00003a  638c              STR      r4,[r1,#0x38]
;;;93         stack_frame->exception_stack_frame.psr = 0x01000000L;              /* PSR */
00003c  f04f7c80          MOV      r12,#0x1000000
000040  f8c1c03c          STR      r12,[r1,#0x3c]
;;;94     
;;;95         /* return task's current stack address */
;;;96         return stk;
;;;97     }
000044  bdf0              POP      {r4-r7,pc}
;;;98     
                          ENDP

000046  0000              DCW      0x0000
                  |L4.72|
                          DCD      0xdeadbeef

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  72745f68          DCB      0x72,0x74,0x5f,0x68
000004  775f6370          DCB      0x77,0x5f,0x63,0x70
000008  755f7368          DCB      0x75,0x5f,0x73,0x68
00000c  7574646f          DCB      0x75,0x74,0x64,0x6f
000010  776e00            DCB      0x77,0x6e,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  rt_interrupt_from_thread
                          DCD      0x00000000
                  rt_interrupt_to_thread
                          DCD      0x00000000
                  rt_thread_switch_interrupt_flag
                          DCD      0x00000000
                  rt_exception_hook
                          DCD      0x00000000
