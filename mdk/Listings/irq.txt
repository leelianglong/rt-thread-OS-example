; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\irq.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\irq.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\app -I..\bsp -I..\common -I..\cortex-m3 -I..\rt_thread\include -I..\STM32F10x_StdPeriph_Driver\inc -IF:\work\Keil_rtthread_experient\mdk\RTE -ID:\EngineeringSoftware\Keil_core\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0 -ID:\EngineeringSoftware\Keil_core\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DSTM32F10X_MD_VL -DSTM32F10X_MD_VL -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\irq.crf ..\rt_thread\kernel\irq.c]
                          THUMB

                          AREA ||i.rt_interrupt_enter||, CODE, READONLY, ALIGN=2

                  rt_interrupt_enter PROC
;;;45      */
;;;46     void rt_interrupt_enter(void)
000000  b510              PUSH     {r4,lr}
;;;47     {
;;;48         rt_base_t level;
;;;49     
;;;50         RT_DEBUG_LOG(RT_DEBUG_IRQ, ("irq coming..., irq nest:%d\n",
000002  bf00              NOP      
000004  bf00              NOP      
;;;51                                     rt_interrupt_nest));
;;;52     
;;;53         level = rt_hw_interrupt_disable();
000006  f7fffffe          BL       rt_hw_interrupt_disable
00000a  4604              MOV      r4,r0
;;;54         rt_interrupt_nest ++;
00000c  4804              LDR      r0,|L1.32|
00000e  7800              LDRB     r0,[r0,#0]  ; rt_interrupt_nest
000010  1c40              ADDS     r0,r0,#1
000012  4903              LDR      r1,|L1.32|
000014  7008              STRB     r0,[r1,#0]
;;;55         rt_hw_interrupt_enable(level);
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       rt_hw_interrupt_enable
;;;56     }
00001c  bd10              POP      {r4,pc}
;;;57     RTM_EXPORT(rt_interrupt_enter);
                          ENDP

00001e  0000              DCW      0x0000
                  |L1.32|
                          DCD      rt_interrupt_nest

                          AREA ||i.rt_interrupt_get_nest||, CODE, READONLY, ALIGN=2

                  rt_interrupt_get_nest PROC
;;;86      */
;;;87     rt_uint8_t rt_interrupt_get_nest(void)
000000  4801              LDR      r0,|L2.8|
;;;88     {
;;;89         return rt_interrupt_nest;
000002  7800              LDRB     r0,[r0,#0]  ; rt_interrupt_nest
;;;90     }
000004  4770              BX       lr
;;;91     RTM_EXPORT(rt_interrupt_get_nest);
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      rt_interrupt_nest

                          AREA ||i.rt_interrupt_leave||, CODE, READONLY, ALIGN=2

                  rt_interrupt_leave PROC
;;;65      */
;;;66     void rt_interrupt_leave(void)
000000  b510              PUSH     {r4,lr}
;;;67     {
;;;68         rt_base_t level;
;;;69     
;;;70         RT_DEBUG_LOG(RT_DEBUG_IRQ, ("irq leave, irq nest:%d\n",
000002  bf00              NOP      
000004  bf00              NOP      
;;;71                                     rt_interrupt_nest));
;;;72     
;;;73         level = rt_hw_interrupt_disable();
000006  f7fffffe          BL       rt_hw_interrupt_disable
00000a  4604              MOV      r4,r0
;;;74         rt_interrupt_nest --;
00000c  4804              LDR      r0,|L3.32|
00000e  7800              LDRB     r0,[r0,#0]  ; rt_interrupt_nest
000010  1e40              SUBS     r0,r0,#1
000012  4903              LDR      r1,|L3.32|
000014  7008              STRB     r0,[r1,#0]
;;;75         rt_hw_interrupt_enable(level);
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       rt_hw_interrupt_enable
;;;76     }
00001c  bd10              POP      {r4,pc}
;;;77     RTM_EXPORT(rt_interrupt_leave);
                          ENDP

00001e  0000              DCW      0x0000
                  |L3.32|
                          DCD      rt_interrupt_nest

                          AREA ||.data||, DATA, ALIGN=0

                  rt_interrupt_nest
000000  00                DCB      0x00
