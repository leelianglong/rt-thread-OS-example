; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\showmem.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\showmem.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\app -I..\bsp -I..\common -I..\cortex-m3 -I..\rt_thread\include -I..\STM32F10x_StdPeriph_Driver\inc -IF:\work\Keil_rtthread_experient\mdk\RTE -ID:\EngineeringSoftware\Keil_core\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0 -ID:\EngineeringSoftware\Keil_core\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DSTM32F10X_MD_VL -DSTM32F10X_MD_VL -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\showmem.crf ..\common\showmem.c]
                          THUMB

                          AREA ||i.rt_hw_show_memory||, CODE, READONLY, ALIGN=2

                  rt_hw_show_memory PROC
;;;16     
;;;17     void rt_hw_show_memory(rt_uint32_t addr, rt_uint32_t size)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;18     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;19     	int i = 0, j =0;
000008  2600              MOVS     r6,#0
00000a  2700              MOVS     r7,#0
;;;20     
;;;21     	RT_ASSERT(addr);
00000c  b924              CBNZ     r4,|L1.24|
00000e  2215              MOVS     r2,#0x15
000010  490f              LDR      r1,|L1.80|
000012  a010              ADR      r0,|L1.84|
000014  f7fffffe          BL       rt_assert_handler
                  |L1.24|
;;;22     
;;;23     	addr = addr & ~0xF;
000018  f024040f          BIC      r4,r4,#0xf
;;;24     	size = 4*((size + 3)/4);
00001c  1ce8              ADDS     r0,r5,#3
00001e  0880              LSRS     r0,r0,#2
000020  0085              LSLS     r5,r0,#2
;;;25     
;;;26     	while(i < size)
000022  e011              B        |L1.72|
                  |L1.36|
;;;27     	{
;;;28     		rt_kprintf("0x%08x: ", addr );
000024  4621              MOV      r1,r4
000026  a00d              ADR      r0,|L1.92|
000028  f7fffffe          BL       rt_kprintf
;;;29     
;;;30     		for(j=0; j<4; j++)
00002c  2700              MOVS     r7,#0
00002e  e006              B        |L1.62|
                  |L1.48|
;;;31     		{
;;;32     			rt_kprintf("0x%08x  ", *(rt_uint32_t *)addr);
000030  a00d              ADR      r0,|L1.104|
000032  6821              LDR      r1,[r4,#0]
000034  f7fffffe          BL       rt_kprintf
;;;33     
;;;34     			addr += 4;
000038  1d24              ADDS     r4,r4,#4
;;;35     			i++;
00003a  1c76              ADDS     r6,r6,#1
00003c  1c7f              ADDS     r7,r7,#1              ;30
                  |L1.62|
00003e  2f04              CMP      r7,#4                 ;30
000040  dbf6              BLT      |L1.48|
;;;36     		}
;;;37     
;;;38     		rt_kprintf("\n");
000042  a00c              ADR      r0,|L1.116|
000044  f7fffffe          BL       rt_kprintf
                  |L1.72|
000048  42ae              CMP      r6,r5                 ;26
00004a  d3eb              BCC      |L1.36|
;;;39     	}
;;;40     
;;;41     	return;
;;;42     }
00004c  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

                  |L1.80|
                          DCD      __FUNCTION__
                  |L1.84|
000054  61646472          DCB      "addr",0
000058  00      
000059  00                DCB      0
00005a  00                DCB      0
00005b  00                DCB      0
                  |L1.92|
00005c  30782530          DCB      "0x%08x: ",0
000060  38783a20
000064  00      
000065  00                DCB      0
000066  00                DCB      0
000067  00                DCB      0
                  |L1.104|
000068  30782530          DCB      "0x%08x  ",0
00006c  38782020
000070  00      
000071  00                DCB      0
000072  00                DCB      0
000073  00                DCB      0
                  |L1.116|
000074  0a00              DCB      "\n",0
000076  00                DCB      0
000077  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  72745f68          DCB      0x72,0x74,0x5f,0x68
000004  775f7368          DCB      0x77,0x5f,0x73,0x68
000008  6f775f6d          DCB      0x6f,0x77,0x5f,0x6d
00000c  656d6f72          DCB      0x65,0x6d,0x6f,0x72
000010  7900              DCB      0x79,0x00
