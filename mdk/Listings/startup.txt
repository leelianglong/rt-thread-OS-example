; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\startup.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\startup.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\app -I..\bsp -I..\common -I..\cortex-m3 -I..\rt_thread\include -I..\STM32F10x_StdPeriph_Driver\inc -IF:\work\Keil_rtthread_experient\mdk\RTE -ID:\EngineeringSoftware\Keil_core\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0 -ID:\EngineeringSoftware\Keil_core\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DSTM32F10X_MD_VL -DSTM32F10X_MD_VL -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\startup.crf ..\app\startup.c]
                          THUMB

                          AREA ||i.assert_failed||, CODE, READONLY, ALIGN=2

                  assert_failed PROC
;;;44     *******************************************************************************/
;;;45     void assert_failed(u8* file, u32 line)
000000  4604              MOV      r4,r0
;;;46     {
000002  460d              MOV      r5,r1
;;;47         rt_kprintf("\n\r Wrong parameter value detected on\r\n");
000004  a006              ADR      r0,|L1.32|
000006  f7fffffe          BL       rt_kprintf
;;;48         rt_kprintf("       file  %s\r\n", file);
00000a  4621              MOV      r1,r4
00000c  a00e              ADR      r0,|L1.72|
00000e  f7fffffe          BL       rt_kprintf
;;;49         rt_kprintf("       line  %d\r\n", line);
000012  4629              MOV      r1,r5
000014  a011              ADR      r0,|L1.92|
000016  f7fffffe          BL       rt_kprintf
;;;50     
;;;51         while (1) ;
00001a  bf00              NOP      
                  |L1.28|
00001c  e7fe              B        |L1.28|
;;;52     }
;;;53     
                          ENDP

00001e  0000              DCW      0x0000
                  |L1.32|
000020  0a0d2057          DCB      "\n\r Wrong parameter value detected on\r\n",0
000024  726f6e67
000028  20706172
00002c  616d6574
000030  65722076
000034  616c7565
000038  20646574
00003c  65637465
000040  64206f6e
000044  0d0a00  
000047  00                DCB      0
                  |L1.72|
000048  20202020          DCB      "       file  %s\r\n",0
00004c  20202066
000050  696c6520
000054  2025730d
000058  0a00    
00005a  00                DCB      0
00005b  00                DCB      0
                  |L1.92|
00005c  20202020          DCB      "       line  %d\r\n",0
000060  2020206c
000064  696e6520
000068  2025640d
00006c  0a00    
00006e  00                DCB      0
00006f  00                DCB      0

                          AREA ||i.main||, CODE, READONLY, ALIGN=1

                  main PROC
;;;101    
;;;102    int main(void)
000000  b510              PUSH     {r4,lr}
;;;103    {
;;;104        /* disable interrupt first */
;;;105        rt_hw_interrupt_disable();
000002  f7fffffe          BL       rt_hw_interrupt_disable
;;;106    
;;;107        /* startup RT-Thread RTOS */
;;;108        rtthread_startup();
000006  f7fffffe          BL       rtthread_startup
;;;109    
;;;110        return 0;
00000a  2000              MOVS     r0,#0
;;;111    }
00000c  bd10              POP      {r4,pc}
;;;112    
                          ENDP


                          AREA ||i.rtthread_startup||, CODE, READONLY, ALIGN=2

                  rtthread_startup PROC
;;;56      */
;;;57     void rtthread_startup(void)
000000  b510              PUSH     {r4,lr}
;;;58     {
;;;59         /* init board */
;;;60         rt_hw_board_init();
000002  f7fffffe          BL       rt_hw_board_init
;;;61     
;;;62         /* show version */
;;;63         rt_show_version();
000006  f7fffffe          BL       rt_show_version
;;;64     
;;;65     #ifdef RT_USING_HEAP
;;;66     #if STM32_EXT_SRAM
;;;67         rt_system_heap_init((void*)STM32_EXT_SRAM_BEGIN, (void*)STM32_EXT_SRAM_END);
;;;68     #else
;;;69     #ifdef __CC_ARM //调试发现走到这里了..keil 是 ARM编译器.下面的$$仅仅是链接器导出的符号,表示ZI段结束后的地址,从这个地址开始到RAM结束为止都分配给堆.
;;;70         rt_system_heap_init((void*)&Image$$RW_IRAM1$$ZI$$Limit, (void*)STM32_SRAM_END);
00000a  f04f2120          MOV      r1,#0x20002000
00000e  4808              LDR      r0,|L3.48|
000010  f7fffffe          BL       rt_system_heap_init
;;;71     #elif __ICCARM__
;;;72         rt_system_heap_init(__segment_end("HEAP"), (void*)STM32_SRAM_END);
;;;73     #else
;;;74         /* init memory system */
;;;75         rt_system_heap_init((void*)&__bss_end, (void*)STM32_SRAM_END);
;;;76     #endif
;;;77     #endif  /* STM32_EXT_SRAM */
;;;78     #endif /* RT_USING_HEAP */
;;;79     
;;;80         /* init scheduler system */
;;;81         rt_system_scheduler_init();
000014  f7fffffe          BL       rt_system_scheduler_init
;;;82     
;;;83         /* initialize timer */
;;;84         rt_system_timer_init();//怎么没有看到初始化硬件定时器?
000018  f7fffffe          BL       rt_system_timer_init
;;;85     
;;;86         /* init timer thread */
;;;87         rt_system_timer_thread_init();
00001c  f7fffffe          BL       rt_system_timer_thread_init
;;;88     
;;;89         /* init application */
;;;90         rt_application_init();
000020  f7fffffe          BL       rt_application_init
;;;91     
;;;92         /* init idle thread */
;;;93         rt_thread_idle_init();
000024  f7fffffe          BL       rt_thread_idle_init
;;;94     
;;;95         /* start scheduler */
;;;96         rt_system_scheduler_start();
000028  f7fffffe          BL       rt_system_scheduler_start
;;;97     
;;;98         /* never reach here */
;;;99         return ;
;;;100    }
00002c  bd10              POP      {r4,pc}
;;;101    
                          ENDP

00002e  0000              DCW      0x0000
                  |L3.48|
                          DCD      ||Image$$RW_IRAM1$$ZI$$Limit||

                  __ARM_use_no_argv EQU 0
