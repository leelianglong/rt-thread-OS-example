; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\stm32f10x_dma.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f10x_dma.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\app -I..\bsp -I..\common -I..\cortex-m3 -I..\rt_thread\include -I..\STM32F10x_StdPeriph_Driver\inc -IF:\work\Keil_rtthread_experient\mdk\RTE -ID:\EngineeringSoftware\Keil_core\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0 -ID:\EngineeringSoftware\Keil_core\ARM\CMSIS\Include -D__UVISION_VERSION=514 -DSTM32F10X_MD_VL -DSTM32F10X_MD_VL -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\stm32f10x_dma.crf ..\STM32F10x_StdPeriph_Driver\src\stm32f10x_dma.c]
                          THUMB

                          AREA ||i.DMA_ClearFlag||, CODE, READONLY, ALIGN=2

                  DMA_ClearFlag PROC
;;;522      */
;;;523    void DMA_ClearFlag(uint32_t DMAy_FLAG)
000000  b510              PUSH     {r4,lr}
;;;524    {
000002  4604              MOV      r4,r0
;;;525      /* Check the parameters */
;;;526      assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));
000004  f0044070          AND      r0,r4,#0xf0000000
000008  b110              CBZ      r0,|L1.16|
00000a  4809              LDR      r0,|L1.48|
00000c  4020              ANDS     r0,r0,r4
00000e  b908              CBNZ     r0,|L1.20|
                  |L1.16|
000010  b104              CBZ      r4,|L1.20|
000012  e004              B        |L1.30|
                  |L1.20|
000014  f240210e          MOV      r1,#0x20e
000018  a006              ADR      r0,|L1.52|
00001a  f7fffffe          BL       assert_failed
                  |L1.30|
;;;527    
;;;528      /* Calculate the used DMAy */
;;;529      if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
00001e  f0045080          AND      r0,r4,#0x10000000
000022  b110              CBZ      r0,|L1.42|
;;;530      {
;;;531        /* Clear the selected DMAy flags */
;;;532        DMA2->IFCR = DMAy_FLAG;
000024  4810              LDR      r0,|L1.104|
000026  6004              STR      r4,[r0,#0]
000028  e001              B        |L1.46|
                  |L1.42|
;;;533      }
;;;534      else
;;;535      {
;;;536        /* Clear the selected DMAy flags */
;;;537        DMA1->IFCR = DMAy_FLAG;
00002a  4810              LDR      r0,|L1.108|
00002c  6044              STR      r4,[r0,#4]
                  |L1.46|
;;;538      }
;;;539    }
00002e  bd10              POP      {r4,pc}
;;;540    
                          ENDP

                  |L1.48|
                          DCD      0xeff00000
                  |L1.52|
000034  2e2e5c53          DCB      "..\\STM32F10x_StdPeriph_Driver\\src\\stm32f10x_dma.c",0
000038  544d3332
00003c  46313078
000040  5f537464
000044  50657269
000048  70685f44
00004c  72697665
000050  725c7372
000054  635c7374
000058  6d333266
00005c  3130785f
000060  646d612e
000064  6300    
000066  00                DCB      0
000067  00                DCB      0
                  |L1.104|
                          DCD      0x40020404
                  |L1.108|
                          DCD      0x40020000

                          AREA ||i.DMA_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  DMA_ClearITPendingBit PROC
;;;683      */
;;;684    void DMA_ClearITPendingBit(uint32_t DMAy_IT)
000000  b510              PUSH     {r4,lr}
;;;685    {
000002  4604              MOV      r4,r0
;;;686      /* Check the parameters */
;;;687      assert_param(IS_DMA_CLEAR_IT(DMAy_IT));
000004  f0044070          AND      r0,r4,#0xf0000000
000008  b110              CBZ      r0,|L2.16|
00000a  4809              LDR      r0,|L2.48|
00000c  4020              ANDS     r0,r0,r4
00000e  b908              CBNZ     r0,|L2.20|
                  |L2.16|
000010  b104              CBZ      r4,|L2.20|
000012  e004              B        |L2.30|
                  |L2.20|
000014  f24021af          MOV      r1,#0x2af
000018  a006              ADR      r0,|L2.52|
00001a  f7fffffe          BL       assert_failed
                  |L2.30|
;;;688    
;;;689      /* Calculate the used DMAy */
;;;690      if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
00001e  f0045080          AND      r0,r4,#0x10000000
000022  b110              CBZ      r0,|L2.42|
;;;691      {
;;;692        /* Clear the selected DMAy interrupt pending bits */
;;;693        DMA2->IFCR = DMAy_IT;
000024  4810              LDR      r0,|L2.104|
000026  6004              STR      r4,[r0,#0]
000028  e001              B        |L2.46|
                  |L2.42|
;;;694      }
;;;695      else
;;;696      {
;;;697        /* Clear the selected DMAy interrupt pending bits */
;;;698        DMA1->IFCR = DMAy_IT;
00002a  4810              LDR      r0,|L2.108|
00002c  6044              STR      r4,[r0,#4]
                  |L2.46|
;;;699      }
;;;700    }
00002e  bd10              POP      {r4,pc}
;;;701    
                          ENDP

                  |L2.48|
                          DCD      0xeff00000
                  |L2.52|
000034  2e2e5c53          DCB      "..\\STM32F10x_StdPeriph_Driver\\src\\stm32f10x_dma.c",0
000038  544d3332
00003c  46313078
000040  5f537464
000044  50657269
000048  70685f44
00004c  72697665
000050  725c7372
000054  635c7374
000058  6d333266
00005c  3130785f
000060  646d612e
000064  6300    
000066  00                DCB      0
000067  00                DCB      0
                  |L2.104|
                          DCD      0x40020404
                  |L2.108|
                          DCD      0x40020000

                          AREA ||i.DMA_Cmd||, CODE, READONLY, ALIGN=2

                  DMA_Cmd PROC
;;;293      */
;;;294    void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;295    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;296      /* Check the parameters */
;;;297      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
000006  4824              LDR      r0,|L3.152|
000008  4284              CMP      r4,r0
00000a  d02a              BEQ      |L3.98|
00000c  4822              LDR      r0,|L3.152|
00000e  3014              ADDS     r0,r0,#0x14
000010  4284              CMP      r4,r0
000012  d026              BEQ      |L3.98|
000014  4820              LDR      r0,|L3.152|
000016  3028              ADDS     r0,r0,#0x28
000018  4284              CMP      r4,r0
00001a  d022              BEQ      |L3.98|
00001c  481e              LDR      r0,|L3.152|
00001e  303c              ADDS     r0,r0,#0x3c
000020  4284              CMP      r4,r0
000022  d01e              BEQ      |L3.98|
000024  481c              LDR      r0,|L3.152|
000026  3050              ADDS     r0,r0,#0x50
000028  4284              CMP      r4,r0
00002a  d01a              BEQ      |L3.98|
00002c  481a              LDR      r0,|L3.152|
00002e  3064              ADDS     r0,r0,#0x64
000030  4284              CMP      r4,r0
000032  d016              BEQ      |L3.98|
000034  4818              LDR      r0,|L3.152|
000036  3078              ADDS     r0,r0,#0x78
000038  4284              CMP      r4,r0
00003a  d012              BEQ      |L3.98|
00003c  4817              LDR      r0,|L3.156|
00003e  4284              CMP      r4,r0
000040  d00f              BEQ      |L3.98|
000042  4816              LDR      r0,|L3.156|
000044  3014              ADDS     r0,r0,#0x14
000046  4284              CMP      r4,r0
000048  d00b              BEQ      |L3.98|
00004a  4814              LDR      r0,|L3.156|
00004c  3028              ADDS     r0,r0,#0x28
00004e  4284              CMP      r4,r0
000050  d007              BEQ      |L3.98|
000052  4812              LDR      r0,|L3.156|
000054  303c              ADDS     r0,r0,#0x3c
000056  4284              CMP      r4,r0
000058  d003              BEQ      |L3.98|
00005a  4810              LDR      r0,|L3.156|
00005c  3050              ADDS     r0,r0,#0x50
00005e  4284              CMP      r4,r0
000060  d100              BNE      |L3.100|
                  |L3.98|
000062  e004              B        |L3.110|
                  |L3.100|
000064  f2401129          MOV      r1,#0x129
000068  a00d              ADR      r0,|L3.160|
00006a  f7fffffe          BL       assert_failed
                  |L3.110|
;;;298      assert_param(IS_FUNCTIONAL_STATE(NewState));
00006e  b10d              CBZ      r5,|L3.116|
000070  2d01              CMP      r5,#1
000072  d100              BNE      |L3.118|
                  |L3.116|
000074  e004              B        |L3.128|
                  |L3.118|
000076  f44f7195          MOV      r1,#0x12a
00007a  a009              ADR      r0,|L3.160|
00007c  f7fffffe          BL       assert_failed
                  |L3.128|
;;;299    
;;;300      if (NewState != DISABLE)
000080  b125              CBZ      r5,|L3.140|
;;;301      {
;;;302        /* Enable the selected DMAy Channelx */
;;;303        DMAy_Channelx->CCR |= DMA_CCR1_EN;
000082  6820              LDR      r0,[r4,#0]
000084  f0400001          ORR      r0,r0,#1
000088  6020              STR      r0,[r4,#0]
00008a  e004              B        |L3.150|
                  |L3.140|
;;;304      }
;;;305      else
;;;306      {
;;;307        /* Disable the selected DMAy Channelx */
;;;308        DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
00008c  6820              LDR      r0,[r4,#0]
00008e  f64f71fe          MOV      r1,#0xfffe
000092  4008              ANDS     r0,r0,r1
000094  6020              STR      r0,[r4,#0]
                  |L3.150|
;;;309      }
;;;310    }
000096  bd70              POP      {r4-r6,pc}
;;;311    
                          ENDP

                  |L3.152|
                          DCD      0x40020008
                  |L3.156|
                          DCD      0x40020408
                  |L3.160|
0000a0  2e2e5c53          DCB      "..\\STM32F10x_StdPeriph_Driver\\src\\stm32f10x_dma.c",0
0000a4  544d3332
0000a8  46313078
0000ac  5f537464
0000b0  50657269
0000b4  70685f44
0000b8  72697665
0000bc  725c7372
0000c0  635c7374
0000c4  6d333266
0000c8  3130785f
0000cc  646d612e
0000d0  6300    
0000d2  00                DCB      0
0000d3  00                DCB      0

                          AREA ||i.DMA_DeInit||, CODE, READONLY, ALIGN=2

                  DMA_DeInit PROC
;;;107      */
;;;108    void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
000000  b510              PUSH     {r4,lr}
;;;109    {
000002  4604              MOV      r4,r0
;;;110      /* Check the parameters */
;;;111      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
000004  486a              LDR      r0,|L4.432|
000006  4284              CMP      r4,r0
000008  d02a              BEQ      |L4.96|
00000a  4869              LDR      r0,|L4.432|
00000c  3014              ADDS     r0,r0,#0x14
00000e  4284              CMP      r4,r0
000010  d026              BEQ      |L4.96|
000012  4867              LDR      r0,|L4.432|
000014  3028              ADDS     r0,r0,#0x28
000016  4284              CMP      r4,r0
000018  d022              BEQ      |L4.96|
00001a  4865              LDR      r0,|L4.432|
00001c  303c              ADDS     r0,r0,#0x3c
00001e  4284              CMP      r4,r0
000020  d01e              BEQ      |L4.96|
000022  4863              LDR      r0,|L4.432|
000024  3050              ADDS     r0,r0,#0x50
000026  4284              CMP      r4,r0
000028  d01a              BEQ      |L4.96|
00002a  4861              LDR      r0,|L4.432|
00002c  3064              ADDS     r0,r0,#0x64
00002e  4284              CMP      r4,r0
000030  d016              BEQ      |L4.96|
000032  485f              LDR      r0,|L4.432|
000034  3078              ADDS     r0,r0,#0x78
000036  4284              CMP      r4,r0
000038  d012              BEQ      |L4.96|
00003a  485e              LDR      r0,|L4.436|
00003c  4284              CMP      r4,r0
00003e  d00f              BEQ      |L4.96|
000040  485c              LDR      r0,|L4.436|
000042  3014              ADDS     r0,r0,#0x14
000044  4284              CMP      r4,r0
000046  d00b              BEQ      |L4.96|
000048  485a              LDR      r0,|L4.436|
00004a  3028              ADDS     r0,r0,#0x28
00004c  4284              CMP      r4,r0
00004e  d007              BEQ      |L4.96|
000050  4858              LDR      r0,|L4.436|
000052  303c              ADDS     r0,r0,#0x3c
000054  4284              CMP      r4,r0
000056  d003              BEQ      |L4.96|
000058  4856              LDR      r0,|L4.436|
00005a  3050              ADDS     r0,r0,#0x50
00005c  4284              CMP      r4,r0
00005e  d100              BNE      |L4.98|
                  |L4.96|
000060  e003              B        |L4.106|
                  |L4.98|
000062  216f              MOVS     r1,#0x6f
000064  a054              ADR      r0,|L4.440|
000066  f7fffffe          BL       assert_failed
                  |L4.106|
;;;112      
;;;113      /* Disable the selected DMAy Channelx */
;;;114      DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
00006a  6820              LDR      r0,[r4,#0]
00006c  f64f71fe          MOV      r1,#0xfffe
000070  4008              ANDS     r0,r0,r1
000072  6020              STR      r0,[r4,#0]
;;;115      
;;;116      /* Reset DMAy Channelx control register */
;;;117      DMAy_Channelx->CCR  = 0;
000074  2000              MOVS     r0,#0
000076  6020              STR      r0,[r4,#0]
;;;118      
;;;119      /* Reset DMAy Channelx remaining bytes register */
;;;120      DMAy_Channelx->CNDTR = 0;
000078  6060              STR      r0,[r4,#4]
;;;121      
;;;122      /* Reset DMAy Channelx peripheral address register */
;;;123      DMAy_Channelx->CPAR  = 0;
00007a  60a0              STR      r0,[r4,#8]
;;;124      
;;;125      /* Reset DMAy Channelx memory address register */
;;;126      DMAy_Channelx->CMAR = 0;
00007c  60e0              STR      r0,[r4,#0xc]
;;;127      
;;;128      if (DMAy_Channelx == DMA1_Channel1)
00007e  484c              LDR      r0,|L4.432|
000080  4284              CMP      r4,r0
000082  d108              BNE      |L4.150|
;;;129      {
;;;130        /* Reset interrupt pending bits for DMA1 Channel1 */
;;;131        DMA1->IFCR |= DMA1_Channel1_IT_Mask;
000084  484a              LDR      r0,|L4.432|
000086  3808              SUBS     r0,r0,#8
000088  6840              LDR      r0,[r0,#4]
00008a  f040000f          ORR      r0,r0,#0xf
00008e  4948              LDR      r1,|L4.432|
000090  3908              SUBS     r1,r1,#8
000092  6048              STR      r0,[r1,#4]
000094  e08a              B        |L4.428|
                  |L4.150|
;;;132      }
;;;133      else if (DMAy_Channelx == DMA1_Channel2)
000096  4846              LDR      r0,|L4.432|
000098  3014              ADDS     r0,r0,#0x14
00009a  4284              CMP      r4,r0
00009c  d108              BNE      |L4.176|
;;;134      {
;;;135        /* Reset interrupt pending bits for DMA1 Channel2 */
;;;136        DMA1->IFCR |= DMA1_Channel2_IT_Mask;
00009e  4844              LDR      r0,|L4.432|
0000a0  3808              SUBS     r0,r0,#8
0000a2  6840              LDR      r0,[r0,#4]
0000a4  f04000f0          ORR      r0,r0,#0xf0
0000a8  4941              LDR      r1,|L4.432|
0000aa  3908              SUBS     r1,r1,#8
0000ac  6048              STR      r0,[r1,#4]
0000ae  e07d              B        |L4.428|
                  |L4.176|
;;;137      }
;;;138      else if (DMAy_Channelx == DMA1_Channel3)
0000b0  483f              LDR      r0,|L4.432|
0000b2  3028              ADDS     r0,r0,#0x28
0000b4  4284              CMP      r4,r0
0000b6  d108              BNE      |L4.202|
;;;139      {
;;;140        /* Reset interrupt pending bits for DMA1 Channel3 */
;;;141        DMA1->IFCR |= DMA1_Channel3_IT_Mask;
0000b8  483d              LDR      r0,|L4.432|
0000ba  3808              SUBS     r0,r0,#8
0000bc  6840              LDR      r0,[r0,#4]
0000be  f4406070          ORR      r0,r0,#0xf00
0000c2  493b              LDR      r1,|L4.432|
0000c4  3908              SUBS     r1,r1,#8
0000c6  6048              STR      r0,[r1,#4]
0000c8  e070              B        |L4.428|
                  |L4.202|
;;;142      }
;;;143      else if (DMAy_Channelx == DMA1_Channel4)
0000ca  4839              LDR      r0,|L4.432|
0000cc  303c              ADDS     r0,r0,#0x3c
0000ce  4284              CMP      r4,r0
0000d0  d108              BNE      |L4.228|
;;;144      {
;;;145        /* Reset interrupt pending bits for DMA1 Channel4 */
;;;146        DMA1->IFCR |= DMA1_Channel4_IT_Mask;
0000d2  4837              LDR      r0,|L4.432|
0000d4  3808              SUBS     r0,r0,#8
0000d6  6840              LDR      r0,[r0,#4]
0000d8  f4404070          ORR      r0,r0,#0xf000
0000dc  4934              LDR      r1,|L4.432|
0000de  3908              SUBS     r1,r1,#8
0000e0  6048              STR      r0,[r1,#4]
0000e2  e063              B        |L4.428|
                  |L4.228|
;;;147      }
;;;148      else if (DMAy_Channelx == DMA1_Channel5)
0000e4  4832              LDR      r0,|L4.432|
0000e6  3050              ADDS     r0,r0,#0x50
0000e8  4284              CMP      r4,r0
0000ea  d108              BNE      |L4.254|
;;;149      {
;;;150        /* Reset interrupt pending bits for DMA1 Channel5 */
;;;151        DMA1->IFCR |= DMA1_Channel5_IT_Mask;
0000ec  4830              LDR      r0,|L4.432|
0000ee  3808              SUBS     r0,r0,#8
0000f0  6840              LDR      r0,[r0,#4]
0000f2  f4402070          ORR      r0,r0,#0xf0000
0000f6  492e              LDR      r1,|L4.432|
0000f8  3908              SUBS     r1,r1,#8
0000fa  6048              STR      r0,[r1,#4]
0000fc  e056              B        |L4.428|
                  |L4.254|
;;;152      }
;;;153      else if (DMAy_Channelx == DMA1_Channel6)
0000fe  482c              LDR      r0,|L4.432|
000100  3064              ADDS     r0,r0,#0x64
000102  4284              CMP      r4,r0
000104  d108              BNE      |L4.280|
;;;154      {
;;;155        /* Reset interrupt pending bits for DMA1 Channel6 */
;;;156        DMA1->IFCR |= DMA1_Channel6_IT_Mask;
000106  482a              LDR      r0,|L4.432|
000108  3808              SUBS     r0,r0,#8
00010a  6840              LDR      r0,[r0,#4]
00010c  f4400070          ORR      r0,r0,#0xf00000
000110  4927              LDR      r1,|L4.432|
000112  3908              SUBS     r1,r1,#8
000114  6048              STR      r0,[r1,#4]
000116  e049              B        |L4.428|
                  |L4.280|
;;;157      }
;;;158      else if (DMAy_Channelx == DMA1_Channel7)
000118  4825              LDR      r0,|L4.432|
00011a  3078              ADDS     r0,r0,#0x78
00011c  4284              CMP      r4,r0
00011e  d108              BNE      |L4.306|
;;;159      {
;;;160        /* Reset interrupt pending bits for DMA1 Channel7 */
;;;161        DMA1->IFCR |= DMA1_Channel7_IT_Mask;
000120  4823              LDR      r0,|L4.432|
000122  3808              SUBS     r0,r0,#8
000124  6840              LDR      r0,[r0,#4]
000126  f0406070          ORR      r0,r0,#0xf000000
00012a  4921              LDR      r1,|L4.432|
00012c  3908              SUBS     r1,r1,#8
00012e  6048              STR      r0,[r1,#4]
000130  e03c              B        |L4.428|
                  |L4.306|
;;;162      }
;;;163      else if (DMAy_Channelx == DMA2_Channel1)
000132  4820              LDR      r0,|L4.436|
000134  4284              CMP      r4,r0
000136  d106              BNE      |L4.326|
;;;164      {
;;;165        /* Reset interrupt pending bits for DMA2 Channel1 */
;;;166        DMA2->IFCR |= DMA2_Channel1_IT_Mask;
000138  1f00              SUBS     r0,r0,#4
00013a  6800              LDR      r0,[r0,#0]
00013c  f040000f          ORR      r0,r0,#0xf
000140  1f21              SUBS     r1,r4,#4
000142  6008              STR      r0,[r1,#0]
000144  e032              B        |L4.428|
                  |L4.326|
;;;167      }
;;;168      else if (DMAy_Channelx == DMA2_Channel2)
000146  481b              LDR      r0,|L4.436|
000148  3014              ADDS     r0,r0,#0x14
00014a  4284              CMP      r4,r0
00014c  d108              BNE      |L4.352|
;;;169      {
;;;170        /* Reset interrupt pending bits for DMA2 Channel2 */
;;;171        DMA2->IFCR |= DMA2_Channel2_IT_Mask;
00014e  4819              LDR      r0,|L4.436|
000150  1f00              SUBS     r0,r0,#4
000152  6800              LDR      r0,[r0,#0]
000154  f04000f0          ORR      r0,r0,#0xf0
000158  4916              LDR      r1,|L4.436|
00015a  1f09              SUBS     r1,r1,#4
00015c  6008              STR      r0,[r1,#0]
00015e  e025              B        |L4.428|
                  |L4.352|
;;;172      }
;;;173      else if (DMAy_Channelx == DMA2_Channel3)
000160  4814              LDR      r0,|L4.436|
000162  3028              ADDS     r0,r0,#0x28
000164  4284              CMP      r4,r0
000166  d108              BNE      |L4.378|
;;;174      {
;;;175        /* Reset interrupt pending bits for DMA2 Channel3 */
;;;176        DMA2->IFCR |= DMA2_Channel3_IT_Mask;
000168  4812              LDR      r0,|L4.436|
00016a  1f00              SUBS     r0,r0,#4
00016c  6800              LDR      r0,[r0,#0]
00016e  f4406070          ORR      r0,r0,#0xf00
000172  4910              LDR      r1,|L4.436|
000174  1f09              SUBS     r1,r1,#4
000176  6008              STR      r0,[r1,#0]
000178  e018              B        |L4.428|
                  |L4.378|
;;;177      }
;;;178      else if (DMAy_Channelx == DMA2_Channel4)
00017a  480e              LDR      r0,|L4.436|
00017c  303c              ADDS     r0,r0,#0x3c
00017e  4284              CMP      r4,r0
000180  d108              BNE      |L4.404|
;;;179      {
;;;180        /* Reset interrupt pending bits for DMA2 Channel4 */
;;;181        DMA2->IFCR |= DMA2_Channel4_IT_Mask;
000182  480c              LDR      r0,|L4.436|
000184  1f00              SUBS     r0,r0,#4
000186  6800              LDR      r0,[r0,#0]
000188  f4404070          ORR      r0,r0,#0xf000
00018c  4909              LDR      r1,|L4.436|
00018e  1f09              SUBS     r1,r1,#4
000190  6008              STR      r0,[r1,#0]
000192  e00b              B        |L4.428|
                  |L4.404|
;;;182      }
;;;183      else
;;;184      { 
;;;185        if (DMAy_Channelx == DMA2_Channel5)
000194  4807              LDR      r0,|L4.436|
000196  3050              ADDS     r0,r0,#0x50
000198  4284              CMP      r4,r0
00019a  d107              BNE      |L4.428|
;;;186        {
;;;187          /* Reset interrupt pending bits for DMA2 Channel5 */
;;;188          DMA2->IFCR |= DMA2_Channel5_IT_Mask;
00019c  4805              LDR      r0,|L4.436|
00019e  1f00              SUBS     r0,r0,#4
0001a0  6800              LDR      r0,[r0,#0]
0001a2  f4402070          ORR      r0,r0,#0xf0000
0001a6  4903              LDR      r1,|L4.436|
0001a8  1f09              SUBS     r1,r1,#4
0001aa  6008              STR      r0,[r1,#0]
                  |L4.428|
;;;189        }
;;;190      }
;;;191    }
0001ac  bd10              POP      {r4,pc}
;;;192    
                          ENDP

0001ae  0000              DCW      0x0000
                  |L4.432|
                          DCD      0x40020008
                  |L4.436|
                          DCD      0x40020408
                  |L4.440|
0001b8  2e2e5c53          DCB      "..\\STM32F10x_StdPeriph_Driver\\src\\stm32f10x_dma.c",0
0001bc  544d3332
0001c0  46313078
0001c4  5f537464
0001c8  50657269
0001cc  70685f44
0001d0  72697665
0001d4  725c7372
0001d8  635c7374
0001dc  6d333266
0001e0  3130785f
0001e4  646d612e
0001e8  6300    
0001ea  00                DCB      0
0001eb  00                DCB      0

                          AREA ||i.DMA_GetCurrDataCounter||, CODE, READONLY, ALIGN=2

                  DMA_GetCurrDataCounter PROC
;;;370      */
;;;371    uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
000000  b510              PUSH     {r4,lr}
;;;372    {
000002  4604              MOV      r4,r0
;;;373      /* Check the parameters */
;;;374      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
000004  481b              LDR      r0,|L5.116|
000006  4284              CMP      r4,r0
000008  d02a              BEQ      |L5.96|
00000a  481a              LDR      r0,|L5.116|
00000c  3014              ADDS     r0,r0,#0x14
00000e  4284              CMP      r4,r0
000010  d026              BEQ      |L5.96|
000012  4818              LDR      r0,|L5.116|
000014  3028              ADDS     r0,r0,#0x28
000016  4284              CMP      r4,r0
000018  d022              BEQ      |L5.96|
00001a  4816              LDR      r0,|L5.116|
00001c  303c              ADDS     r0,r0,#0x3c
00001e  4284              CMP      r4,r0
000020  d01e              BEQ      |L5.96|
000022  4814              LDR      r0,|L5.116|
000024  3050              ADDS     r0,r0,#0x50
000026  4284              CMP      r4,r0
000028  d01a              BEQ      |L5.96|
00002a  4812              LDR      r0,|L5.116|
00002c  3064              ADDS     r0,r0,#0x64
00002e  4284              CMP      r4,r0
000030  d016              BEQ      |L5.96|
000032  4810              LDR      r0,|L5.116|
000034  3078              ADDS     r0,r0,#0x78
000036  4284              CMP      r4,r0
000038  d012              BEQ      |L5.96|
00003a  480f              LDR      r0,|L5.120|
00003c  4284              CMP      r4,r0
00003e  d00f              BEQ      |L5.96|
000040  480d              LDR      r0,|L5.120|
000042  3014              ADDS     r0,r0,#0x14
000044  4284              CMP      r4,r0
000046  d00b              BEQ      |L5.96|
000048  480b              LDR      r0,|L5.120|
00004a  3028              ADDS     r0,r0,#0x28
00004c  4284              CMP      r4,r0
00004e  d007              BEQ      |L5.96|
000050  4809              LDR      r0,|L5.120|
000052  303c              ADDS     r0,r0,#0x3c
000054  4284              CMP      r4,r0
000056  d003              BEQ      |L5.96|
000058  4807              LDR      r0,|L5.120|
00005a  3050              ADDS     r0,r0,#0x50
00005c  4284              CMP      r4,r0
00005e  d100              BNE      |L5.98|
                  |L5.96|
000060  e004              B        |L5.108|
                  |L5.98|
000062  f44f71bb          MOV      r1,#0x176
000066  a005              ADR      r0,|L5.124|
000068  f7fffffe          BL       assert_failed
                  |L5.108|
;;;375      /* Return the number of remaining data units for DMAy Channelx */
;;;376      return ((uint16_t)(DMAy_Channelx->CNDTR));
00006c  6860              LDR      r0,[r4,#4]
00006e  b280              UXTH     r0,r0
;;;377    }
000070  bd10              POP      {r4,pc}
;;;378    
                          ENDP

000072  0000              DCW      0x0000
                  |L5.116|
                          DCD      0x40020008
                  |L5.120|
                          DCD      0x40020408
                  |L5.124|
00007c  2e2e5c53          DCB      "..\\STM32F10x_StdPeriph_Driver\\src\\stm32f10x_dma.c",0
000080  544d3332
000084  46313078
000088  5f537464
00008c  50657269
000090  70685f44
000094  72697665
000098  725c7372
00009c  635c7374
0000a0  6d333266
0000a4  3130785f
0000a8  646d612e
0000ac  6300    
0000ae  00                DCB      0
0000af  00                DCB      0

                          AREA ||i.DMA_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  DMA_GetFlagStatus PROC
;;;432      */
;;;433    FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
000000  b570              PUSH     {r4-r6,lr}
;;;434    {
000002  4604              MOV      r4,r0
;;;435      FlagStatus bitstatus = RESET;
000004  2500              MOVS     r5,#0
;;;436      uint32_t tmpreg = 0;
000006  2600              MOVS     r6,#0
;;;437      
;;;438      /* Check the parameters */
;;;439      assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));
000008  2c01              CMP      r4,#1
00000a  d07d              BEQ      |L6.264|
00000c  2c02              CMP      r4,#2
00000e  d07b              BEQ      |L6.264|
000010  2c04              CMP      r4,#4
000012  d079              BEQ      |L6.264|
000014  2c08              CMP      r4,#8
000016  d077              BEQ      |L6.264|
000018  2c10              CMP      r4,#0x10
00001a  d075              BEQ      |L6.264|
00001c  2c20              CMP      r4,#0x20
00001e  d073              BEQ      |L6.264|
000020  2c40              CMP      r4,#0x40
000022  d071              BEQ      |L6.264|
000024  2c80              CMP      r4,#0x80
000026  d07f              BEQ      |L6.296|
000028  f5b47f80          CMP      r4,#0x100
00002c  d07c              BEQ      |L6.296|
00002e  f5b47f00          CMP      r4,#0x200
000032  d079              BEQ      |L6.296|
000034  f5b46f80          CMP      r4,#0x400
000038  d076              BEQ      |L6.296|
00003a  f5b46f00          CMP      r4,#0x800
00003e  d073              BEQ      |L6.296|
000040  f5b45f80          CMP      r4,#0x1000
000044  d070              BEQ      |L6.296|
000046  f5b45f00          CMP      r4,#0x2000
00004a  d06d              BEQ      |L6.296|
00004c  f5b44f80          CMP      r4,#0x4000
000050  d06a              BEQ      |L6.296|
000052  f5b44f00          CMP      r4,#0x8000
000056  d067              BEQ      |L6.296|
000058  f5b43f80          CMP      r4,#0x10000
00005c  d064              BEQ      |L6.296|
00005e  f5b43f00          CMP      r4,#0x20000
000062  d061              BEQ      |L6.296|
000064  f5b42f80          CMP      r4,#0x40000
000068  d05e              BEQ      |L6.296|
00006a  f5b42f00          CMP      r4,#0x80000
00006e  d05b              BEQ      |L6.296|
000070  f5b41f80          CMP      r4,#0x100000
000074  d058              BEQ      |L6.296|
000076  f5b41f00          CMP      r4,#0x200000
00007a  d055              BEQ      |L6.296|
00007c  f5b40f80          CMP      r4,#0x400000
000080  d052              BEQ      |L6.296|
000082  f5b40f00          CMP      r4,#0x800000
000086  d04f              BEQ      |L6.296|
000088  f1b47f80          CMP      r4,#0x1000000
00008c  d04c              BEQ      |L6.296|
00008e  f1b47f00          CMP      r4,#0x2000000
000092  d049              BEQ      |L6.296|
000094  f1b46f80          CMP      r4,#0x4000000
000098  d046              BEQ      |L6.296|
00009a  f1b46f00          CMP      r4,#0x8000000
00009e  d043              BEQ      |L6.296|
0000a0  482c              LDR      r0,|L6.340|
0000a2  4284              CMP      r4,r0
0000a4  d040              BEQ      |L6.296|
0000a6  1c40              ADDS     r0,r0,#1
0000a8  4284              CMP      r4,r0
0000aa  d03d              BEQ      |L6.296|
0000ac  1c80              ADDS     r0,r0,#2
0000ae  4284              CMP      r4,r0
0000b0  d03a              BEQ      |L6.296|
0000b2  1d00              ADDS     r0,r0,#4
0000b4  4284              CMP      r4,r0
0000b6  d037              BEQ      |L6.296|
0000b8  4826              LDR      r0,|L6.340|
0000ba  300f              ADDS     r0,r0,#0xf
0000bc  4284              CMP      r4,r0
0000be  d033              BEQ      |L6.296|
0000c0  4824              LDR      r0,|L6.340|
0000c2  301f              ADDS     r0,r0,#0x1f
0000c4  4284              CMP      r4,r0
0000c6  d02f              BEQ      |L6.296|
0000c8  4822              LDR      r0,|L6.340|
0000ca  303f              ADDS     r0,r0,#0x3f
0000cc  4284              CMP      r4,r0
0000ce  d02b              BEQ      |L6.296|
0000d0  4820              LDR      r0,|L6.340|
0000d2  307f              ADDS     r0,r0,#0x7f
0000d4  4284              CMP      r4,r0
0000d6  d027              BEQ      |L6.296|
0000d8  481e              LDR      r0,|L6.340|
0000da  30ff              ADDS     r0,r0,#0xff
0000dc  4284              CMP      r4,r0
0000de  d023              BEQ      |L6.296|
0000e0  481d              LDR      r0,|L6.344|
0000e2  4284              CMP      r4,r0
0000e4  d020              BEQ      |L6.296|
0000e6  481d              LDR      r0,|L6.348|
0000e8  4284              CMP      r4,r0
0000ea  d01d              BEQ      |L6.296|
0000ec  481c              LDR      r0,|L6.352|
0000ee  4284              CMP      r4,r0
0000f0  d01a              BEQ      |L6.296|
0000f2  f1b42f10          CMP      r4,#0x10001000
0000f6  d017              BEQ      |L6.296|
0000f8  ea4f30f0          ROR      r0,r0,#15
0000fc  4284              CMP      r4,r0
0000fe  d013              BEQ      |L6.296|
000100  4818              LDR      r0,|L6.356|
000102  4284              CMP      r4,r0
000104  d010              BEQ      |L6.296|
000106  e000              B        |L6.266|
                  |L6.264|
000108  e00e              B        |L6.296|
                  |L6.266|
00010a  4817              LDR      r0,|L6.360|
00010c  4284              CMP      r4,r0
00010e  d00b              BEQ      |L6.296|
000110  4816              LDR      r0,|L6.364|
000112  4284              CMP      r4,r0
000114  d008              BEQ      |L6.296|
000116  4816              LDR      r0,|L6.368|
000118  4284              CMP      r4,r0
00011a  d005              BEQ      |L6.296|
00011c  4815              LDR      r0,|L6.372|
00011e  4284              CMP      r4,r0
000120  d002              BEQ      |L6.296|
000122  4815              LDR      r0,|L6.376|
000124  4284              CMP      r4,r0
000126  d100              BNE      |L6.298|
                  |L6.296|
000128  e004              B        |L6.308|
                  |L6.298|
00012a  f24011b7          MOV      r1,#0x1b7
00012e  a013              ADR      r0,|L6.380|
000130  f7fffffe          BL       assert_failed
                  |L6.308|
;;;440    
;;;441      /* Calculate the used DMAy */
;;;442      if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
000134  f0045080          AND      r0,r4,#0x10000000
000138  b110              CBZ      r0,|L6.320|
;;;443      {
;;;444        /* Get DMA2 ISR register value */
;;;445        tmpreg = DMA2->ISR ;
00013a  481d              LDR      r0,|L6.432|
00013c  6806              LDR      r6,[r0,#0]
00013e  e001              B        |L6.324|
                  |L6.320|
;;;446      }
;;;447      else
;;;448      {
;;;449        /* Get DMA1 ISR register value */
;;;450        tmpreg = DMA1->ISR ;
000140  481c              LDR      r0,|L6.436|
000142  6806              LDR      r6,[r0,#0]
                  |L6.324|
;;;451      }
;;;452    
;;;453      /* Check the status of the specified DMAy flag */
;;;454      if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
000144  ea060004          AND      r0,r6,r4
000148  b108              CBZ      r0,|L6.334|
;;;455      {
;;;456        /* DMAy_FLAG is set */
;;;457        bitstatus = SET;
00014a  2501              MOVS     r5,#1
00014c  e000              B        |L6.336|
                  |L6.334|
;;;458      }
;;;459      else
;;;460      {
;;;461        /* DMAy_FLAG is reset */
;;;462        bitstatus = RESET;
00014e  2500              MOVS     r5,#0
                  |L6.336|
;;;463      }
;;;464      
;;;465      /* Return the DMAy_FLAG status */
;;;466      return  bitstatus;
000150  4628              MOV      r0,r5
;;;467    }
000152  bd70              POP      {r4-r6,pc}
;;;468    
                          ENDP

                  |L6.340|
                          DCD      0x10000001
                  |L6.344|
                          DCD      0x10000200
                  |L6.348|
                          DCD      0x10000400
                  |L6.352|
                          DCD      0x10000800
                  |L6.356|
                          DCD      0x10004000
                  |L6.360|
                          DCD      0x10008000
                  |L6.364|
                          DCD      0x10010000
                  |L6.368|
                          DCD      0x10020000
                  |L6.372|
                          DCD      0x10040000
                  |L6.376|
                          DCD      0x10080000
                  |L6.380|
00017c  2e2e5c53          DCB      "..\\STM32F10x_StdPeriph_Driver\\src\\stm32f10x_dma.c",0
000180  544d3332
000184  46313078
000188  5f537464
00018c  50657269
000190  70685f44
000194  72697665
000198  725c7372
00019c  635c7374
0001a0  6d333266
0001a4  3130785f
0001a8  646d612e
0001ac  6300    
0001ae  00                DCB      0
0001af  00                DCB      0
                  |L6.432|
                          DCD      0x40020400
                  |L6.436|
                          DCD      0x40020000

                          AREA ||i.DMA_GetITStatus||, CODE, READONLY, ALIGN=2

                  DMA_GetITStatus PROC
;;;594      */
;;;595    ITStatus DMA_GetITStatus(uint32_t DMAy_IT)
000000  b570              PUSH     {r4-r6,lr}
;;;596    {
000002  4604              MOV      r4,r0
;;;597      ITStatus bitstatus = RESET;
000004  2500              MOVS     r5,#0
;;;598      uint32_t tmpreg = 0;
000006  2600              MOVS     r6,#0
;;;599    
;;;600      /* Check the parameters */
;;;601      assert_param(IS_DMA_GET_IT(DMAy_IT));
000008  2c01              CMP      r4,#1
00000a  d07d              BEQ      |L7.264|
00000c  2c02              CMP      r4,#2
00000e  d07b              BEQ      |L7.264|
000010  2c04              CMP      r4,#4
000012  d079              BEQ      |L7.264|
000014  2c08              CMP      r4,#8
000016  d077              BEQ      |L7.264|
000018  2c10              CMP      r4,#0x10
00001a  d075              BEQ      |L7.264|
00001c  2c20              CMP      r4,#0x20
00001e  d073              BEQ      |L7.264|
000020  2c40              CMP      r4,#0x40
000022  d071              BEQ      |L7.264|
000024  2c80              CMP      r4,#0x80
000026  d07f              BEQ      |L7.296|
000028  f5b47f80          CMP      r4,#0x100
00002c  d07c              BEQ      |L7.296|
00002e  f5b47f00          CMP      r4,#0x200
000032  d079              BEQ      |L7.296|
000034  f5b46f80          CMP      r4,#0x400
000038  d076              BEQ      |L7.296|
00003a  f5b46f00          CMP      r4,#0x800
00003e  d073              BEQ      |L7.296|
000040  f5b45f80          CMP      r4,#0x1000
000044  d070              BEQ      |L7.296|
000046  f5b45f00          CMP      r4,#0x2000
00004a  d06d              BEQ      |L7.296|
00004c  f5b44f80          CMP      r4,#0x4000
000050  d06a              BEQ      |L7.296|
000052  f5b44f00          CMP      r4,#0x8000
000056  d067              BEQ      |L7.296|
000058  f5b43f80          CMP      r4,#0x10000
00005c  d064              BEQ      |L7.296|
00005e  f5b43f00          CMP      r4,#0x20000
000062  d061              BEQ      |L7.296|
000064  f5b42f80          CMP      r4,#0x40000
000068  d05e              BEQ      |L7.296|
00006a  f5b42f00          CMP      r4,#0x80000
00006e  d05b              BEQ      |L7.296|
000070  f5b41f80          CMP      r4,#0x100000
000074  d058              BEQ      |L7.296|
000076  f5b41f00          CMP      r4,#0x200000
00007a  d055              BEQ      |L7.296|
00007c  f5b40f80          CMP      r4,#0x400000
000080  d052              BEQ      |L7.296|
000082  f5b40f00          CMP      r4,#0x800000
000086  d04f              BEQ      |L7.296|
000088  f1b47f80          CMP      r4,#0x1000000
00008c  d04c              BEQ      |L7.296|
00008e  f1b47f00          CMP      r4,#0x2000000
000092  d049              BEQ      |L7.296|
000094  f1b46f80          CMP      r4,#0x4000000
000098  d046              BEQ      |L7.296|
00009a  f1b46f00          CMP      r4,#0x8000000
00009e  d043              BEQ      |L7.296|
0000a0  482c              LDR      r0,|L7.340|
0000a2  4284              CMP      r4,r0
0000a4  d040              BEQ      |L7.296|
0000a6  1c40              ADDS     r0,r0,#1
0000a8  4284              CMP      r4,r0
0000aa  d03d              BEQ      |L7.296|
0000ac  1c80              ADDS     r0,r0,#2
0000ae  4284              CMP      r4,r0
0000b0  d03a              BEQ      |L7.296|
0000b2  1d00              ADDS     r0,r0,#4
0000b4  4284              CMP      r4,r0
0000b6  d037              BEQ      |L7.296|
0000b8  4826              LDR      r0,|L7.340|
0000ba  300f              ADDS     r0,r0,#0xf
0000bc  4284              CMP      r4,r0
0000be  d033              BEQ      |L7.296|
0000c0  4824              LDR      r0,|L7.340|
0000c2  301f              ADDS     r0,r0,#0x1f
0000c4  4284              CMP      r4,r0
0000c6  d02f              BEQ      |L7.296|
0000c8  4822              LDR      r0,|L7.340|
0000ca  303f              ADDS     r0,r0,#0x3f
0000cc  4284              CMP      r4,r0
0000ce  d02b              BEQ      |L7.296|
0000d0  4820              LDR      r0,|L7.340|
0000d2  307f              ADDS     r0,r0,#0x7f
0000d4  4284              CMP      r4,r0
0000d6  d027              BEQ      |L7.296|
0000d8  481e              LDR      r0,|L7.340|
0000da  30ff              ADDS     r0,r0,#0xff
0000dc  4284              CMP      r4,r0
0000de  d023              BEQ      |L7.296|
0000e0  481d              LDR      r0,|L7.344|
0000e2  4284              CMP      r4,r0
0000e4  d020              BEQ      |L7.296|
0000e6  481d              LDR      r0,|L7.348|
0000e8  4284              CMP      r4,r0
0000ea  d01d              BEQ      |L7.296|
0000ec  481c              LDR      r0,|L7.352|
0000ee  4284              CMP      r4,r0
0000f0  d01a              BEQ      |L7.296|
0000f2  f1b42f10          CMP      r4,#0x10001000
0000f6  d017              BEQ      |L7.296|
0000f8  ea4f30f0          ROR      r0,r0,#15
0000fc  4284              CMP      r4,r0
0000fe  d013              BEQ      |L7.296|
000100  4818              LDR      r0,|L7.356|
000102  4284              CMP      r4,r0
000104  d010              BEQ      |L7.296|
000106  e000              B        |L7.266|
                  |L7.264|
000108  e00e              B        |L7.296|
                  |L7.266|
00010a  4817              LDR      r0,|L7.360|
00010c  4284              CMP      r4,r0
00010e  d00b              BEQ      |L7.296|
000110  4816              LDR      r0,|L7.364|
000112  4284              CMP      r4,r0
000114  d008              BEQ      |L7.296|
000116  4816              LDR      r0,|L7.368|
000118  4284              CMP      r4,r0
00011a  d005              BEQ      |L7.296|
00011c  4815              LDR      r0,|L7.372|
00011e  4284              CMP      r4,r0
000120  d002              BEQ      |L7.296|
000122  4815              LDR      r0,|L7.376|
000124  4284              CMP      r4,r0
000126  d100              BNE      |L7.298|
                  |L7.296|
000128  e004              B        |L7.308|
                  |L7.298|
00012a  f2402159          MOV      r1,#0x259
00012e  a013              ADR      r0,|L7.380|
000130  f7fffffe          BL       assert_failed
                  |L7.308|
;;;602    
;;;603      /* Calculate the used DMA */
;;;604      if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
000134  f0045080          AND      r0,r4,#0x10000000
000138  b110              CBZ      r0,|L7.320|
;;;605      {
;;;606        /* Get DMA2 ISR register value */
;;;607        tmpreg = DMA2->ISR;
00013a  481d              LDR      r0,|L7.432|
00013c  6806              LDR      r6,[r0,#0]
00013e  e001              B        |L7.324|
                  |L7.320|
;;;608      }
;;;609      else
;;;610      {
;;;611        /* Get DMA1 ISR register value */
;;;612        tmpreg = DMA1->ISR;
000140  481c              LDR      r0,|L7.436|
000142  6806              LDR      r6,[r0,#0]
                  |L7.324|
;;;613      }
;;;614    
;;;615      /* Check the status of the specified DMAy interrupt */
;;;616      if ((tmpreg & DMAy_IT) != (uint32_t)RESET)
000144  ea060004          AND      r0,r6,r4
000148  b108              CBZ      r0,|L7.334|
;;;617      {
;;;618        /* DMAy_IT is set */
;;;619        bitstatus = SET;
00014a  2501              MOVS     r5,#1
00014c  e000              B        |L7.336|
                  |L7.334|
;;;620      }
;;;621      else
;;;622      {
;;;623        /* DMAy_IT is reset */
;;;624        bitstatus = RESET;
00014e  2500              MOVS     r5,#0
                  |L7.336|
;;;625      }
;;;626      /* Return the DMA_IT status */
;;;627      return  bitstatus;
000150  4628              MOV      r0,r5
;;;628    }
000152  bd70              POP      {r4-r6,pc}
;;;629    
                          ENDP

                  |L7.340|
                          DCD      0x10000001
                  |L7.344|
                          DCD      0x10000200
                  |L7.348|
                          DCD      0x10000400
                  |L7.352|
                          DCD      0x10000800
                  |L7.356|
                          DCD      0x10004000
                  |L7.360|
                          DCD      0x10008000
                  |L7.364|
                          DCD      0x10010000
                  |L7.368|
                          DCD      0x10020000
                  |L7.372|
                          DCD      0x10040000
                  |L7.376|
                          DCD      0x10080000
                  |L7.380|
00017c  2e2e5c53          DCB      "..\\STM32F10x_StdPeriph_Driver\\src\\stm32f10x_dma.c",0
000180  544d3332
000184  46313078
000188  5f537464
00018c  50657269
000190  70685f44
000194  72697665
000198  725c7372
00019c  635c7374
0001a0  6d333266
0001a4  3130785f
0001a8  646d612e
0001ac  6300    
0001ae  00                DCB      0
0001af  00                DCB      0
                  |L7.432|
                          DCD      0x40020400
                  |L7.436|
                          DCD      0x40020000

                          AREA ||i.DMA_ITConfig||, CODE, READONLY, ALIGN=2

                  DMA_ITConfig PROC
;;;325      */
;;;326    void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;327    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;328      /* Check the parameters */
;;;329      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
000008  4827              LDR      r0,|L8.168|
00000a  4284              CMP      r4,r0
00000c  d02a              BEQ      |L8.100|
00000e  4826              LDR      r0,|L8.168|
000010  3014              ADDS     r0,r0,#0x14
000012  4284              CMP      r4,r0
000014  d026              BEQ      |L8.100|
000016  4824              LDR      r0,|L8.168|
000018  3028              ADDS     r0,r0,#0x28
00001a  4284              CMP      r4,r0
00001c  d022              BEQ      |L8.100|
00001e  4822              LDR      r0,|L8.168|
000020  303c              ADDS     r0,r0,#0x3c
000022  4284              CMP      r4,r0
000024  d01e              BEQ      |L8.100|
000026  4820              LDR      r0,|L8.168|
000028  3050              ADDS     r0,r0,#0x50
00002a  4284              CMP      r4,r0
00002c  d01a              BEQ      |L8.100|
00002e  481e              LDR      r0,|L8.168|
000030  3064              ADDS     r0,r0,#0x64
000032  4284              CMP      r4,r0
000034  d016              BEQ      |L8.100|
000036  481c              LDR      r0,|L8.168|
000038  3078              ADDS     r0,r0,#0x78
00003a  4284              CMP      r4,r0
00003c  d012              BEQ      |L8.100|
00003e  481b              LDR      r0,|L8.172|
000040  4284              CMP      r4,r0
000042  d00f              BEQ      |L8.100|
000044  4819              LDR      r0,|L8.172|
000046  3014              ADDS     r0,r0,#0x14
000048  4284              CMP      r4,r0
00004a  d00b              BEQ      |L8.100|
00004c  4817              LDR      r0,|L8.172|
00004e  3028              ADDS     r0,r0,#0x28
000050  4284              CMP      r4,r0
000052  d007              BEQ      |L8.100|
000054  4815              LDR      r0,|L8.172|
000056  303c              ADDS     r0,r0,#0x3c
000058  4284              CMP      r4,r0
00005a  d003              BEQ      |L8.100|
00005c  4813              LDR      r0,|L8.172|
00005e  3050              ADDS     r0,r0,#0x50
000060  4284              CMP      r4,r0
000062  d100              BNE      |L8.102|
                  |L8.100|
000064  e004              B        |L8.112|
                  |L8.102|
000066  f2401149          MOV      r1,#0x149
00006a  a011              ADR      r0,|L8.176|
00006c  f7fffffe          BL       assert_failed
                  |L8.112|
;;;330      assert_param(IS_DMA_CONFIG_IT(DMA_IT));
000070  f025000e          BIC      r0,r5,#0xe
000074  b908              CBNZ     r0,|L8.122|
000076  b105              CBZ      r5,|L8.122|
000078  e004              B        |L8.132|
                  |L8.122|
00007a  f44f71a5          MOV      r1,#0x14a
00007e  a00c              ADR      r0,|L8.176|
000080  f7fffffe          BL       assert_failed
                  |L8.132|
;;;331      assert_param(IS_FUNCTIONAL_STATE(NewState));
000084  b10e              CBZ      r6,|L8.138|
000086  2e01              CMP      r6,#1
000088  d100              BNE      |L8.140|
                  |L8.138|
00008a  e004              B        |L8.150|
                  |L8.140|
00008c  f240114b          MOV      r1,#0x14b
000090  a007              ADR      r0,|L8.176|
000092  f7fffffe          BL       assert_failed
                  |L8.150|
;;;332      if (NewState != DISABLE)
000096  b11e              CBZ      r6,|L8.160|
;;;333      {
;;;334        /* Enable the selected DMA interrupts */
;;;335        DMAy_Channelx->CCR |= DMA_IT;
000098  6820              LDR      r0,[r4,#0]
00009a  4328              ORRS     r0,r0,r5
00009c  6020              STR      r0,[r4,#0]
00009e  e002              B        |L8.166|
                  |L8.160|
;;;336      }
;;;337      else
;;;338      {
;;;339        /* Disable the selected DMA interrupts */
;;;340        DMAy_Channelx->CCR &= ~DMA_IT;
0000a0  6820              LDR      r0,[r4,#0]
0000a2  43a8              BICS     r0,r0,r5
0000a4  6020              STR      r0,[r4,#0]
                  |L8.166|
;;;341      }
;;;342    }
0000a6  bd70              POP      {r4-r6,pc}
;;;343    
                          ENDP

                  |L8.168|
                          DCD      0x40020008
                  |L8.172|
                          DCD      0x40020408
                  |L8.176|
0000b0  2e2e5c53          DCB      "..\\STM32F10x_StdPeriph_Driver\\src\\stm32f10x_dma.c",0
0000b4  544d3332
0000b8  46313078
0000bc  5f537464
0000c0  50657269
0000c4  70685f44
0000c8  72697665
0000cc  725c7372
0000d0  635c7374
0000d4  6d333266
0000d8  3130785f
0000dc  646d612e
0000e0  6300    
0000e2  00                DCB      0
0000e3  00                DCB      0

                          AREA ||i.DMA_Init||, CODE, READONLY, ALIGN=2

                  DMA_Init PROC
;;;201      */
;;;202    void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
000000  b570              PUSH     {r4-r6,lr}
;;;203    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;204      uint32_t tmpreg = 0;
000006  2600              MOVS     r6,#0
;;;205    
;;;206      /* Check the parameters */
;;;207      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
000008  485e              LDR      r0,|L9.388|
00000a  4285              CMP      r5,r0
00000c  d02a              BEQ      |L9.100|
00000e  485d              LDR      r0,|L9.388|
000010  3014              ADDS     r0,r0,#0x14
000012  4285              CMP      r5,r0
000014  d026              BEQ      |L9.100|
000016  485b              LDR      r0,|L9.388|
000018  3028              ADDS     r0,r0,#0x28
00001a  4285              CMP      r5,r0
00001c  d022              BEQ      |L9.100|
00001e  4859              LDR      r0,|L9.388|
000020  303c              ADDS     r0,r0,#0x3c
000022  4285              CMP      r5,r0
000024  d01e              BEQ      |L9.100|
000026  4857              LDR      r0,|L9.388|
000028  3050              ADDS     r0,r0,#0x50
00002a  4285              CMP      r5,r0
00002c  d01a              BEQ      |L9.100|
00002e  4855              LDR      r0,|L9.388|
000030  3064              ADDS     r0,r0,#0x64
000032  4285              CMP      r5,r0
000034  d016              BEQ      |L9.100|
000036  4853              LDR      r0,|L9.388|
000038  3078              ADDS     r0,r0,#0x78
00003a  4285              CMP      r5,r0
00003c  d012              BEQ      |L9.100|
00003e  4852              LDR      r0,|L9.392|
000040  4285              CMP      r5,r0
000042  d00f              BEQ      |L9.100|
000044  4850              LDR      r0,|L9.392|
000046  3014              ADDS     r0,r0,#0x14
000048  4285              CMP      r5,r0
00004a  d00b              BEQ      |L9.100|
00004c  484e              LDR      r0,|L9.392|
00004e  3028              ADDS     r0,r0,#0x28
000050  4285              CMP      r5,r0
000052  d007              BEQ      |L9.100|
000054  484c              LDR      r0,|L9.392|
000056  303c              ADDS     r0,r0,#0x3c
000058  4285              CMP      r5,r0
00005a  d003              BEQ      |L9.100|
00005c  484a              LDR      r0,|L9.392|
00005e  3050              ADDS     r0,r0,#0x50
000060  4285              CMP      r5,r0
000062  d100              BNE      |L9.102|
                  |L9.100|
000064  e003              B        |L9.110|
                  |L9.102|
000066  21cf              MOVS     r1,#0xcf
000068  a048              ADR      r0,|L9.396|
00006a  f7fffffe          BL       assert_failed
                  |L9.110|
;;;208      assert_param(IS_DMA_DIR(DMA_InitStruct->DMA_DIR));
00006e  68a0              LDR      r0,[r4,#8]
000070  2810              CMP      r0,#0x10
000072  d001              BEQ      |L9.120|
000074  68a0              LDR      r0,[r4,#8]
000076  b900              CBNZ     r0,|L9.122|
                  |L9.120|
000078  e003              B        |L9.130|
                  |L9.122|
00007a  21d0              MOVS     r1,#0xd0
00007c  a043              ADR      r0,|L9.396|
00007e  f7fffffe          BL       assert_failed
                  |L9.130|
;;;209      assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
000082  68e0              LDR      r0,[r4,#0xc]
000084  b120              CBZ      r0,|L9.144|
000086  68e0              LDR      r0,[r4,#0xc]
000088  f5b03f80          CMP      r0,#0x10000
00008c  d200              BCS      |L9.144|
00008e  e003              B        |L9.152|
                  |L9.144|
000090  21d1              MOVS     r1,#0xd1
000092  a03e              ADR      r0,|L9.396|
000094  f7fffffe          BL       assert_failed
                  |L9.152|
;;;210      assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
000098  6920              LDR      r0,[r4,#0x10]
00009a  2840              CMP      r0,#0x40
00009c  d001              BEQ      |L9.162|
00009e  6920              LDR      r0,[r4,#0x10]
0000a0  b900              CBNZ     r0,|L9.164|
                  |L9.162|
0000a2  e003              B        |L9.172|
                  |L9.164|
0000a4  21d2              MOVS     r1,#0xd2
0000a6  a039              ADR      r0,|L9.396|
0000a8  f7fffffe          BL       assert_failed
                  |L9.172|
;;;211      assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));   
0000ac  6960              LDR      r0,[r4,#0x14]
0000ae  2880              CMP      r0,#0x80
0000b0  d001              BEQ      |L9.182|
0000b2  6960              LDR      r0,[r4,#0x14]
0000b4  b900              CBNZ     r0,|L9.184|
                  |L9.182|
0000b6  e003              B        |L9.192|
                  |L9.184|
0000b8  21d3              MOVS     r1,#0xd3
0000ba  a034              ADR      r0,|L9.396|
0000bc  f7fffffe          BL       assert_failed
                  |L9.192|
;;;212      assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
0000c0  69a0              LDR      r0,[r4,#0x18]
0000c2  b138              CBZ      r0,|L9.212|
0000c4  69a0              LDR      r0,[r4,#0x18]
0000c6  f5b07f80          CMP      r0,#0x100
0000ca  d003              BEQ      |L9.212|
0000cc  69a0              LDR      r0,[r4,#0x18]
0000ce  f5b07f00          CMP      r0,#0x200
0000d2  d100              BNE      |L9.214|
                  |L9.212|
0000d4  e003              B        |L9.222|
                  |L9.214|
0000d6  21d4              MOVS     r1,#0xd4
0000d8  a02c              ADR      r0,|L9.396|
0000da  f7fffffe          BL       assert_failed
                  |L9.222|
;;;213      assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
0000de  69e0              LDR      r0,[r4,#0x1c]
0000e0  b138              CBZ      r0,|L9.242|
0000e2  69e0              LDR      r0,[r4,#0x1c]
0000e4  f5b06f80          CMP      r0,#0x400
0000e8  d003              BEQ      |L9.242|
0000ea  69e0              LDR      r0,[r4,#0x1c]
0000ec  f5b06f00          CMP      r0,#0x800
0000f0  d100              BNE      |L9.244|
                  |L9.242|
0000f2  e003              B        |L9.252|
                  |L9.244|
0000f4  21d5              MOVS     r1,#0xd5
0000f6  a025              ADR      r0,|L9.396|
0000f8  f7fffffe          BL       assert_failed
                  |L9.252|
;;;214      assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
0000fc  6a20              LDR      r0,[r4,#0x20]
0000fe  2820              CMP      r0,#0x20
000100  d001              BEQ      |L9.262|
000102  6a20              LDR      r0,[r4,#0x20]
000104  b900              CBNZ     r0,|L9.264|
                  |L9.262|
000106  e003              B        |L9.272|
                  |L9.264|
000108  21d6              MOVS     r1,#0xd6
00010a  a020              ADR      r0,|L9.396|
00010c  f7fffffe          BL       assert_failed
                  |L9.272|
;;;215      assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
000110  6a60              LDR      r0,[r4,#0x24]
000112  f5b05f40          CMP      r0,#0x3000
000116  d009              BEQ      |L9.300|
000118  6a60              LDR      r0,[r4,#0x24]
00011a  f5b05f00          CMP      r0,#0x2000
00011e  d005              BEQ      |L9.300|
000120  6a60              LDR      r0,[r4,#0x24]
000122  f5b05f80          CMP      r0,#0x1000
000126  d001              BEQ      |L9.300|
000128  6a60              LDR      r0,[r4,#0x24]
00012a  b900              CBNZ     r0,|L9.302|
                  |L9.300|
00012c  e003              B        |L9.310|
                  |L9.302|
00012e  21d7              MOVS     r1,#0xd7
000130  a016              ADR      r0,|L9.396|
000132  f7fffffe          BL       assert_failed
                  |L9.310|
;;;216      assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));
000136  6aa0              LDR      r0,[r4,#0x28]
000138  f5b04f80          CMP      r0,#0x4000
00013c  d001              BEQ      |L9.322|
00013e  6aa0              LDR      r0,[r4,#0x28]
000140  b900              CBNZ     r0,|L9.324|
                  |L9.322|
000142  e003              B        |L9.332|
                  |L9.324|
000144  21d8              MOVS     r1,#0xd8
000146  a011              ADR      r0,|L9.396|
000148  f7fffffe          BL       assert_failed
                  |L9.332|
;;;217    
;;;218    /*--------------------------- DMAy Channelx CCR Configuration -----------------*/
;;;219      /* Get the DMAy_Channelx CCR value */
;;;220      tmpreg = DMAy_Channelx->CCR;
00014c  682e              LDR      r6,[r5,#0]
;;;221      /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
;;;222      tmpreg &= CCR_CLEAR_Mask;
00014e  f64770f0          MOV      r0,#0x7ff0
000152  4386              BICS     r6,r6,r0
;;;223      /* Configure DMAy Channelx: data transfer, data size, priority level and mode */
;;;224      /* Set DIR bit according to DMA_DIR value */
;;;225      /* Set CIRC bit according to DMA_Mode value */
;;;226      /* Set PINC bit according to DMA_PeripheralInc value */
;;;227      /* Set MINC bit according to DMA_MemoryInc value */
;;;228      /* Set PSIZE bits according to DMA_PeripheralDataSize value */
;;;229      /* Set MSIZE bits according to DMA_MemoryDataSize value */
;;;230      /* Set PL bits according to DMA_Priority value */
;;;231      /* Set the MEM2MEM bit according to DMA_M2M value */
;;;232      tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
000154  6a21              LDR      r1,[r4,#0x20]
000156  68a0              LDR      r0,[r4,#8]
000158  4308              ORRS     r0,r0,r1
00015a  6921              LDR      r1,[r4,#0x10]
00015c  4308              ORRS     r0,r0,r1
00015e  6961              LDR      r1,[r4,#0x14]
000160  4308              ORRS     r0,r0,r1
000162  69a1              LDR      r1,[r4,#0x18]
000164  4308              ORRS     r0,r0,r1
000166  69e1              LDR      r1,[r4,#0x1c]
000168  4308              ORRS     r0,r0,r1
00016a  6a61              LDR      r1,[r4,#0x24]
00016c  4308              ORRS     r0,r0,r1
00016e  6aa1              LDR      r1,[r4,#0x28]
000170  4308              ORRS     r0,r0,r1
000172  4306              ORRS     r6,r6,r0
;;;233                DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
;;;234                DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
;;;235                DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
;;;236    
;;;237      /* Write to DMAy Channelx CCR */
;;;238      DMAy_Channelx->CCR = tmpreg;
000174  602e              STR      r6,[r5,#0]
;;;239    
;;;240    /*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
;;;241      /* Write to DMAy Channelx CNDTR */
;;;242      DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
000176  68e0              LDR      r0,[r4,#0xc]
000178  6068              STR      r0,[r5,#4]
;;;243    
;;;244    /*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
;;;245      /* Write to DMAy Channelx CPAR */
;;;246      DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
00017a  6820              LDR      r0,[r4,#0]
00017c  60a8              STR      r0,[r5,#8]
;;;247    
;;;248    /*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
;;;249      /* Write to DMAy Channelx CMAR */
;;;250      DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
00017e  6860              LDR      r0,[r4,#4]
000180  60e8              STR      r0,[r5,#0xc]
;;;251    }
000182  bd70              POP      {r4-r6,pc}
;;;252    
                          ENDP

                  |L9.388|
                          DCD      0x40020008
                  |L9.392|
                          DCD      0x40020408
                  |L9.396|
00018c  2e2e5c53          DCB      "..\\STM32F10x_StdPeriph_Driver\\src\\stm32f10x_dma.c",0
000190  544d3332
000194  46313078
000198  5f537464
00019c  50657269
0001a0  70685f44
0001a4  72697665
0001a8  725c7372
0001ac  635c7374
0001b0  6d333266
0001b4  3130785f
0001b8  646d612e
0001bc  6300    
0001be  00                DCB      0
0001bf  00                DCB      0

                          AREA ||i.DMA_SetCurrDataCounter||, CODE, READONLY, ALIGN=2

                  DMA_SetCurrDataCounter PROC
;;;352      */
;;;353    void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
000000  b570              PUSH     {r4-r6,lr}
;;;354    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;355      /* Check the parameters */
;;;356      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
000006  481b              LDR      r0,|L10.116|
000008  4284              CMP      r4,r0
00000a  d02a              BEQ      |L10.98|
00000c  4819              LDR      r0,|L10.116|
00000e  3014              ADDS     r0,r0,#0x14
000010  4284              CMP      r4,r0
000012  d026              BEQ      |L10.98|
000014  4817              LDR      r0,|L10.116|
000016  3028              ADDS     r0,r0,#0x28
000018  4284              CMP      r4,r0
00001a  d022              BEQ      |L10.98|
00001c  4815              LDR      r0,|L10.116|
00001e  303c              ADDS     r0,r0,#0x3c
000020  4284              CMP      r4,r0
000022  d01e              BEQ      |L10.98|
000024  4813              LDR      r0,|L10.116|
000026  3050              ADDS     r0,r0,#0x50
000028  4284              CMP      r4,r0
00002a  d01a              BEQ      |L10.98|
00002c  4811              LDR      r0,|L10.116|
00002e  3064              ADDS     r0,r0,#0x64
000030  4284              CMP      r4,r0
000032  d016              BEQ      |L10.98|
000034  480f              LDR      r0,|L10.116|
000036  3078              ADDS     r0,r0,#0x78
000038  4284              CMP      r4,r0
00003a  d012              BEQ      |L10.98|
00003c  480e              LDR      r0,|L10.120|
00003e  4284              CMP      r4,r0
000040  d00f              BEQ      |L10.98|
000042  480d              LDR      r0,|L10.120|
000044  3014              ADDS     r0,r0,#0x14
000046  4284              CMP      r4,r0
000048  d00b              BEQ      |L10.98|
00004a  480b              LDR      r0,|L10.120|
00004c  3028              ADDS     r0,r0,#0x28
00004e  4284              CMP      r4,r0
000050  d007              BEQ      |L10.98|
000052  4809              LDR      r0,|L10.120|
000054  303c              ADDS     r0,r0,#0x3c
000056  4284              CMP      r4,r0
000058  d003              BEQ      |L10.98|
00005a  4807              LDR      r0,|L10.120|
00005c  3050              ADDS     r0,r0,#0x50
00005e  4284              CMP      r4,r0
000060  d100              BNE      |L10.100|
                  |L10.98|
000062  e004              B        |L10.110|
                  |L10.100|
000064  f44f71b2          MOV      r1,#0x164
000068  a004              ADR      r0,|L10.124|
00006a  f7fffffe          BL       assert_failed
                  |L10.110|
;;;357      
;;;358    /*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
;;;359      /* Write to DMAy Channelx CNDTR */
;;;360      DMAy_Channelx->CNDTR = DataNumber;  
00006e  6065              STR      r5,[r4,#4]
;;;361    }
000070  bd70              POP      {r4-r6,pc}
;;;362    
                          ENDP

000072  0000              DCW      0x0000
                  |L10.116|
                          DCD      0x40020008
                  |L10.120|
                          DCD      0x40020408
                  |L10.124|
00007c  2e2e5c53          DCB      "..\\STM32F10x_StdPeriph_Driver\\src\\stm32f10x_dma.c",0
000080  544d3332
000084  46313078
000088  5f537464
00008c  50657269
000090  70685f44
000094  72697665
000098  725c7372
00009c  635c7374
0000a0  6d333266
0000a4  3130785f
0000a8  646d612e
0000ac  6300    
0000ae  00                DCB      0
0000af  00                DCB      0

                          AREA ||i.DMA_StructInit||, CODE, READONLY, ALIGN=1

                  DMA_StructInit PROC
;;;258      */
;;;259    void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
000000  2100              MOVS     r1,#0
;;;260    {
;;;261    /*-------------- Reset DMA init structure parameters values ------------------*/
;;;262      /* Initialize the DMA_PeripheralBaseAddr member */
;;;263      DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
000002  6001              STR      r1,[r0,#0]
;;;264      /* Initialize the DMA_MemoryBaseAddr member */
;;;265      DMA_InitStruct->DMA_MemoryBaseAddr = 0;
000004  6041              STR      r1,[r0,#4]
;;;266      /* Initialize the DMA_DIR member */
;;;267      DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
000006  6081              STR      r1,[r0,#8]
;;;268      /* Initialize the DMA_BufferSize member */
;;;269      DMA_InitStruct->DMA_BufferSize = 0;
000008  60c1              STR      r1,[r0,#0xc]
;;;270      /* Initialize the DMA_PeripheralInc member */
;;;271      DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
00000a  6101              STR      r1,[r0,#0x10]
;;;272      /* Initialize the DMA_MemoryInc member */
;;;273      DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
00000c  6141              STR      r1,[r0,#0x14]
;;;274      /* Initialize the DMA_PeripheralDataSize member */
;;;275      DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
00000e  6181              STR      r1,[r0,#0x18]
;;;276      /* Initialize the DMA_MemoryDataSize member */
;;;277      DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
000010  61c1              STR      r1,[r0,#0x1c]
;;;278      /* Initialize the DMA_Mode member */
;;;279      DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
000012  6201              STR      r1,[r0,#0x20]
;;;280      /* Initialize the DMA_Priority member */
;;;281      DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
000014  6241              STR      r1,[r0,#0x24]
;;;282      /* Initialize the DMA_M2M member */
;;;283      DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
000016  6281              STR      r1,[r0,#0x28]
;;;284    }
000018  4770              BX       lr
;;;285    
                          ENDP

